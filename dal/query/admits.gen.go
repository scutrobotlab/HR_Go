// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"HR_Go/dal/model"
)

func newAdmit(db *gorm.DB, opts ...gen.DOOption) admit {
	_admit := admit{}

	_admit.admitDo.UseDB(db, opts...)
	_admit.admitDo.UseModel(&model.Admit{})

	tableName := _admit.admitDo.TableName()
	_admit.ALL = field.NewAsterisk(tableName)
	_admit.ID = field.NewInt64(tableName, "id")
	_admit.Group_ = field.NewString(tableName, "group")
	_admit.AdminID = field.NewInt64(tableName, "admin_id")
	_admit.ApplicantID = field.NewInt64(tableName, "applicant_id")
	_admit.DeletedAt = field.NewField(tableName, "deleted_at")
	_admit.CreatedAt = field.NewTime(tableName, "created_at")
	_admit.UpdatedAt = field.NewTime(tableName, "updated_at")

	_admit.fillFieldMap()

	return _admit
}

type admit struct {
	admitDo

	ALL         field.Asterisk
	ID          field.Int64  // ID
	Group_      field.String // 录取组别
	AdminID     field.Int64  // 操作录取的管理员
	ApplicantID field.Int64  // 申请ID
	DeletedAt   field.Field  // 删除时间
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (a admit) Table(newTableName string) *admit {
	a.admitDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a admit) As(alias string) *admit {
	a.admitDo.DO = *(a.admitDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *admit) updateTableName(table string) *admit {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Group_ = field.NewString(table, "group")
	a.AdminID = field.NewInt64(table, "admin_id")
	a.ApplicantID = field.NewInt64(table, "applicant_id")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *admit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *admit) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["group"] = a.Group_
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["applicant_id"] = a.ApplicantID
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a admit) clone(db *gorm.DB) admit {
	a.admitDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a admit) replaceDB(db *gorm.DB) admit {
	a.admitDo.ReplaceDB(db)
	return a
}

type admitDo struct{ gen.DO }

type IAdmitDo interface {
	gen.SubQuery
	Debug() IAdmitDo
	WithContext(ctx context.Context) IAdmitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdmitDo
	WriteDB() IAdmitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdmitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdmitDo
	Not(conds ...gen.Condition) IAdmitDo
	Or(conds ...gen.Condition) IAdmitDo
	Select(conds ...field.Expr) IAdmitDo
	Where(conds ...gen.Condition) IAdmitDo
	Order(conds ...field.Expr) IAdmitDo
	Distinct(cols ...field.Expr) IAdmitDo
	Omit(cols ...field.Expr) IAdmitDo
	Join(table schema.Tabler, on ...field.Expr) IAdmitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdmitDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdmitDo
	Group(cols ...field.Expr) IAdmitDo
	Having(conds ...gen.Condition) IAdmitDo
	Limit(limit int) IAdmitDo
	Offset(offset int) IAdmitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdmitDo
	Unscoped() IAdmitDo
	Create(values ...*model.Admit) error
	CreateInBatches(values []*model.Admit, batchSize int) error
	Save(values ...*model.Admit) error
	First() (*model.Admit, error)
	Take() (*model.Admit, error)
	Last() (*model.Admit, error)
	Find() ([]*model.Admit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Admit, err error)
	FindInBatches(result *[]*model.Admit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Admit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdmitDo
	Assign(attrs ...field.AssignExpr) IAdmitDo
	Joins(fields ...field.RelationField) IAdmitDo
	Preload(fields ...field.RelationField) IAdmitDo
	FirstOrInit() (*model.Admit, error)
	FirstOrCreate() (*model.Admit, error)
	FindByPage(offset int, limit int) (result []*model.Admit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdmitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a admitDo) Debug() IAdmitDo {
	return a.withDO(a.DO.Debug())
}

func (a admitDo) WithContext(ctx context.Context) IAdmitDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a admitDo) ReadDB() IAdmitDo {
	return a.Clauses(dbresolver.Read)
}

func (a admitDo) WriteDB() IAdmitDo {
	return a.Clauses(dbresolver.Write)
}

func (a admitDo) Session(config *gorm.Session) IAdmitDo {
	return a.withDO(a.DO.Session(config))
}

func (a admitDo) Clauses(conds ...clause.Expression) IAdmitDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a admitDo) Returning(value interface{}, columns ...string) IAdmitDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a admitDo) Not(conds ...gen.Condition) IAdmitDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a admitDo) Or(conds ...gen.Condition) IAdmitDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a admitDo) Select(conds ...field.Expr) IAdmitDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a admitDo) Where(conds ...gen.Condition) IAdmitDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a admitDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAdmitDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a admitDo) Order(conds ...field.Expr) IAdmitDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a admitDo) Distinct(cols ...field.Expr) IAdmitDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a admitDo) Omit(cols ...field.Expr) IAdmitDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a admitDo) Join(table schema.Tabler, on ...field.Expr) IAdmitDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a admitDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdmitDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a admitDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdmitDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a admitDo) Group(cols ...field.Expr) IAdmitDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a admitDo) Having(conds ...gen.Condition) IAdmitDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a admitDo) Limit(limit int) IAdmitDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a admitDo) Offset(offset int) IAdmitDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a admitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdmitDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a admitDo) Unscoped() IAdmitDo {
	return a.withDO(a.DO.Unscoped())
}

func (a admitDo) Create(values ...*model.Admit) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a admitDo) CreateInBatches(values []*model.Admit, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a admitDo) Save(values ...*model.Admit) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a admitDo) First() (*model.Admit, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admit), nil
	}
}

func (a admitDo) Take() (*model.Admit, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admit), nil
	}
}

func (a admitDo) Last() (*model.Admit, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admit), nil
	}
}

func (a admitDo) Find() ([]*model.Admit, error) {
	result, err := a.DO.Find()
	return result.([]*model.Admit), err
}

func (a admitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Admit, err error) {
	buf := make([]*model.Admit, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a admitDo) FindInBatches(result *[]*model.Admit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a admitDo) Attrs(attrs ...field.AssignExpr) IAdmitDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a admitDo) Assign(attrs ...field.AssignExpr) IAdmitDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a admitDo) Joins(fields ...field.RelationField) IAdmitDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a admitDo) Preload(fields ...field.RelationField) IAdmitDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a admitDo) FirstOrInit() (*model.Admit, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admit), nil
	}
}

func (a admitDo) FirstOrCreate() (*model.Admit, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Admit), nil
	}
}

func (a admitDo) FindByPage(offset int, limit int) (result []*model.Admit, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a admitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a admitDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a admitDo) Delete(models ...*model.Admit) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *admitDo) withDO(do gen.Dao) *admitDo {
	a.DO = *do.(*gen.DO)
	return a
}
