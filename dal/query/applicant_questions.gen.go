// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"HR_Go/dal/model"
)

func newApplicantQuestion(db *gorm.DB, opts ...gen.DOOption) applicantQuestion {
	_applicantQuestion := applicantQuestion{}

	_applicantQuestion.applicantQuestionDo.UseDB(db, opts...)
	_applicantQuestion.applicantQuestionDo.UseModel(&model.ApplicantQuestion{})

	tableName := _applicantQuestion.applicantQuestionDo.TableName()
	_applicantQuestion.ALL = field.NewAsterisk(tableName)
	_applicantQuestion.ID = field.NewInt64(tableName, "id")
	_applicantQuestion.ApplicantID = field.NewInt64(tableName, "applicant_id")
	_applicantQuestion.QuestionID = field.NewInt64(tableName, "question_id")
	_applicantQuestion.Answer = field.NewString(tableName, "answer")
	_applicantQuestion.DeletedAt = field.NewField(tableName, "deleted_at")
	_applicantQuestion.CreatedAt = field.NewTime(tableName, "created_at")
	_applicantQuestion.UpdatedAt = field.NewTime(tableName, "updated_at")

	_applicantQuestion.fillFieldMap()

	return _applicantQuestion
}

type applicantQuestion struct {
	applicantQuestionDo

	ALL         field.Asterisk
	ID          field.Int64
	ApplicantID field.Int64  // 申请ID
	QuestionID  field.Int64  // 问题ID
	Answer      field.String // 答案
	DeletedAt   field.Field
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (a applicantQuestion) Table(newTableName string) *applicantQuestion {
	a.applicantQuestionDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a applicantQuestion) As(alias string) *applicantQuestion {
	a.applicantQuestionDo.DO = *(a.applicantQuestionDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *applicantQuestion) updateTableName(table string) *applicantQuestion {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ApplicantID = field.NewInt64(table, "applicant_id")
	a.QuestionID = field.NewInt64(table, "question_id")
	a.Answer = field.NewString(table, "answer")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *applicantQuestion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *applicantQuestion) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["applicant_id"] = a.ApplicantID
	a.fieldMap["question_id"] = a.QuestionID
	a.fieldMap["answer"] = a.Answer
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a applicantQuestion) clone(db *gorm.DB) applicantQuestion {
	a.applicantQuestionDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a applicantQuestion) replaceDB(db *gorm.DB) applicantQuestion {
	a.applicantQuestionDo.ReplaceDB(db)
	return a
}

type applicantQuestionDo struct{ gen.DO }

type IApplicantQuestionDo interface {
	gen.SubQuery
	Debug() IApplicantQuestionDo
	WithContext(ctx context.Context) IApplicantQuestionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IApplicantQuestionDo
	WriteDB() IApplicantQuestionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IApplicantQuestionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IApplicantQuestionDo
	Not(conds ...gen.Condition) IApplicantQuestionDo
	Or(conds ...gen.Condition) IApplicantQuestionDo
	Select(conds ...field.Expr) IApplicantQuestionDo
	Where(conds ...gen.Condition) IApplicantQuestionDo
	Order(conds ...field.Expr) IApplicantQuestionDo
	Distinct(cols ...field.Expr) IApplicantQuestionDo
	Omit(cols ...field.Expr) IApplicantQuestionDo
	Join(table schema.Tabler, on ...field.Expr) IApplicantQuestionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IApplicantQuestionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IApplicantQuestionDo
	Group(cols ...field.Expr) IApplicantQuestionDo
	Having(conds ...gen.Condition) IApplicantQuestionDo
	Limit(limit int) IApplicantQuestionDo
	Offset(offset int) IApplicantQuestionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IApplicantQuestionDo
	Unscoped() IApplicantQuestionDo
	Create(values ...*model.ApplicantQuestion) error
	CreateInBatches(values []*model.ApplicantQuestion, batchSize int) error
	Save(values ...*model.ApplicantQuestion) error
	First() (*model.ApplicantQuestion, error)
	Take() (*model.ApplicantQuestion, error)
	Last() (*model.ApplicantQuestion, error)
	Find() ([]*model.ApplicantQuestion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ApplicantQuestion, err error)
	FindInBatches(result *[]*model.ApplicantQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ApplicantQuestion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IApplicantQuestionDo
	Assign(attrs ...field.AssignExpr) IApplicantQuestionDo
	Joins(fields ...field.RelationField) IApplicantQuestionDo
	Preload(fields ...field.RelationField) IApplicantQuestionDo
	FirstOrInit() (*model.ApplicantQuestion, error)
	FirstOrCreate() (*model.ApplicantQuestion, error)
	FindByPage(offset int, limit int) (result []*model.ApplicantQuestion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IApplicantQuestionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a applicantQuestionDo) Debug() IApplicantQuestionDo {
	return a.withDO(a.DO.Debug())
}

func (a applicantQuestionDo) WithContext(ctx context.Context) IApplicantQuestionDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a applicantQuestionDo) ReadDB() IApplicantQuestionDo {
	return a.Clauses(dbresolver.Read)
}

func (a applicantQuestionDo) WriteDB() IApplicantQuestionDo {
	return a.Clauses(dbresolver.Write)
}

func (a applicantQuestionDo) Session(config *gorm.Session) IApplicantQuestionDo {
	return a.withDO(a.DO.Session(config))
}

func (a applicantQuestionDo) Clauses(conds ...clause.Expression) IApplicantQuestionDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a applicantQuestionDo) Returning(value interface{}, columns ...string) IApplicantQuestionDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a applicantQuestionDo) Not(conds ...gen.Condition) IApplicantQuestionDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a applicantQuestionDo) Or(conds ...gen.Condition) IApplicantQuestionDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a applicantQuestionDo) Select(conds ...field.Expr) IApplicantQuestionDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a applicantQuestionDo) Where(conds ...gen.Condition) IApplicantQuestionDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a applicantQuestionDo) Order(conds ...field.Expr) IApplicantQuestionDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a applicantQuestionDo) Distinct(cols ...field.Expr) IApplicantQuestionDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a applicantQuestionDo) Omit(cols ...field.Expr) IApplicantQuestionDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a applicantQuestionDo) Join(table schema.Tabler, on ...field.Expr) IApplicantQuestionDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a applicantQuestionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IApplicantQuestionDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a applicantQuestionDo) RightJoin(table schema.Tabler, on ...field.Expr) IApplicantQuestionDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a applicantQuestionDo) Group(cols ...field.Expr) IApplicantQuestionDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a applicantQuestionDo) Having(conds ...gen.Condition) IApplicantQuestionDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a applicantQuestionDo) Limit(limit int) IApplicantQuestionDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a applicantQuestionDo) Offset(offset int) IApplicantQuestionDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a applicantQuestionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IApplicantQuestionDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a applicantQuestionDo) Unscoped() IApplicantQuestionDo {
	return a.withDO(a.DO.Unscoped())
}

func (a applicantQuestionDo) Create(values ...*model.ApplicantQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a applicantQuestionDo) CreateInBatches(values []*model.ApplicantQuestion, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a applicantQuestionDo) Save(values ...*model.ApplicantQuestion) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a applicantQuestionDo) First() (*model.ApplicantQuestion, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApplicantQuestion), nil
	}
}

func (a applicantQuestionDo) Take() (*model.ApplicantQuestion, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApplicantQuestion), nil
	}
}

func (a applicantQuestionDo) Last() (*model.ApplicantQuestion, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApplicantQuestion), nil
	}
}

func (a applicantQuestionDo) Find() ([]*model.ApplicantQuestion, error) {
	result, err := a.DO.Find()
	return result.([]*model.ApplicantQuestion), err
}

func (a applicantQuestionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ApplicantQuestion, err error) {
	buf := make([]*model.ApplicantQuestion, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a applicantQuestionDo) FindInBatches(result *[]*model.ApplicantQuestion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a applicantQuestionDo) Attrs(attrs ...field.AssignExpr) IApplicantQuestionDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a applicantQuestionDo) Assign(attrs ...field.AssignExpr) IApplicantQuestionDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a applicantQuestionDo) Joins(fields ...field.RelationField) IApplicantQuestionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a applicantQuestionDo) Preload(fields ...field.RelationField) IApplicantQuestionDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a applicantQuestionDo) FirstOrInit() (*model.ApplicantQuestion, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApplicantQuestion), nil
	}
}

func (a applicantQuestionDo) FirstOrCreate() (*model.ApplicantQuestion, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApplicantQuestion), nil
	}
}

func (a applicantQuestionDo) FindByPage(offset int, limit int) (result []*model.ApplicantQuestion, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a applicantQuestionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a applicantQuestionDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a applicantQuestionDo) Delete(models ...*model.ApplicantQuestion) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *applicantQuestionDo) withDO(do gen.Dao) *applicantQuestionDo {
	a.DO = *do.(*gen.DO)
	return a
}
