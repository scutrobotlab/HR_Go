// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"HR_Go/dal/model"
)

func newApplicantTime(db *gorm.DB, opts ...gen.DOOption) applicantTime {
	_applicantTime := applicantTime{}

	_applicantTime.applicantTimeDo.UseDB(db, opts...)
	_applicantTime.applicantTimeDo.UseModel(&model.ApplicantTime{})

	tableName := _applicantTime.applicantTimeDo.TableName()
	_applicantTime.ALL = field.NewAsterisk(tableName)
	_applicantTime.ID = field.NewInt64(tableName, "id")
	_applicantTime.ApplicantID = field.NewInt64(tableName, "applicant_id")
	_applicantTime.Group_ = field.NewString(tableName, "group")
	_applicantTime.TimeID = field.NewInt64(tableName, "time_id")
	_applicantTime.RoomID = field.NewInt64(tableName, "room_id")
	_applicantTime.Extend = field.NewString(tableName, "extend")
	_applicantTime.DeletedAt = field.NewField(tableName, "deleted_at")
	_applicantTime.CreatedAt = field.NewTime(tableName, "created_at")
	_applicantTime.UpdatedAt = field.NewTime(tableName, "updated_at")

	_applicantTime.fillFieldMap()

	return _applicantTime
}

type applicantTime struct {
	applicantTimeDo

	ALL         field.Asterisk
	ID          field.Int64
	ApplicantID field.Int64  // 申请ID
	Group_      field.String // 申请组别
	TimeID      field.Int64  // 时间ID
	RoomID      field.Int64  // 房间ID
	Extend      field.String // 扩展信息
	DeletedAt   field.Field
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (a applicantTime) Table(newTableName string) *applicantTime {
	a.applicantTimeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a applicantTime) As(alias string) *applicantTime {
	a.applicantTimeDo.DO = *(a.applicantTimeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *applicantTime) updateTableName(table string) *applicantTime {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.ApplicantID = field.NewInt64(table, "applicant_id")
	a.Group_ = field.NewString(table, "group")
	a.TimeID = field.NewInt64(table, "time_id")
	a.RoomID = field.NewInt64(table, "room_id")
	a.Extend = field.NewString(table, "extend")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *applicantTime) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *applicantTime) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["applicant_id"] = a.ApplicantID
	a.fieldMap["group"] = a.Group_
	a.fieldMap["time_id"] = a.TimeID
	a.fieldMap["room_id"] = a.RoomID
	a.fieldMap["extend"] = a.Extend
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a applicantTime) clone(db *gorm.DB) applicantTime {
	a.applicantTimeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a applicantTime) replaceDB(db *gorm.DB) applicantTime {
	a.applicantTimeDo.ReplaceDB(db)
	return a
}

type applicantTimeDo struct{ gen.DO }

type IApplicantTimeDo interface {
	gen.SubQuery
	Debug() IApplicantTimeDo
	WithContext(ctx context.Context) IApplicantTimeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IApplicantTimeDo
	WriteDB() IApplicantTimeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IApplicantTimeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IApplicantTimeDo
	Not(conds ...gen.Condition) IApplicantTimeDo
	Or(conds ...gen.Condition) IApplicantTimeDo
	Select(conds ...field.Expr) IApplicantTimeDo
	Where(conds ...gen.Condition) IApplicantTimeDo
	Order(conds ...field.Expr) IApplicantTimeDo
	Distinct(cols ...field.Expr) IApplicantTimeDo
	Omit(cols ...field.Expr) IApplicantTimeDo
	Join(table schema.Tabler, on ...field.Expr) IApplicantTimeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IApplicantTimeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IApplicantTimeDo
	Group(cols ...field.Expr) IApplicantTimeDo
	Having(conds ...gen.Condition) IApplicantTimeDo
	Limit(limit int) IApplicantTimeDo
	Offset(offset int) IApplicantTimeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IApplicantTimeDo
	Unscoped() IApplicantTimeDo
	Create(values ...*model.ApplicantTime) error
	CreateInBatches(values []*model.ApplicantTime, batchSize int) error
	Save(values ...*model.ApplicantTime) error
	First() (*model.ApplicantTime, error)
	Take() (*model.ApplicantTime, error)
	Last() (*model.ApplicantTime, error)
	Find() ([]*model.ApplicantTime, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ApplicantTime, err error)
	FindInBatches(result *[]*model.ApplicantTime, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ApplicantTime) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IApplicantTimeDo
	Assign(attrs ...field.AssignExpr) IApplicantTimeDo
	Joins(fields ...field.RelationField) IApplicantTimeDo
	Preload(fields ...field.RelationField) IApplicantTimeDo
	FirstOrInit() (*model.ApplicantTime, error)
	FirstOrCreate() (*model.ApplicantTime, error)
	FindByPage(offset int, limit int) (result []*model.ApplicantTime, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IApplicantTimeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a applicantTimeDo) Debug() IApplicantTimeDo {
	return a.withDO(a.DO.Debug())
}

func (a applicantTimeDo) WithContext(ctx context.Context) IApplicantTimeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a applicantTimeDo) ReadDB() IApplicantTimeDo {
	return a.Clauses(dbresolver.Read)
}

func (a applicantTimeDo) WriteDB() IApplicantTimeDo {
	return a.Clauses(dbresolver.Write)
}

func (a applicantTimeDo) Session(config *gorm.Session) IApplicantTimeDo {
	return a.withDO(a.DO.Session(config))
}

func (a applicantTimeDo) Clauses(conds ...clause.Expression) IApplicantTimeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a applicantTimeDo) Returning(value interface{}, columns ...string) IApplicantTimeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a applicantTimeDo) Not(conds ...gen.Condition) IApplicantTimeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a applicantTimeDo) Or(conds ...gen.Condition) IApplicantTimeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a applicantTimeDo) Select(conds ...field.Expr) IApplicantTimeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a applicantTimeDo) Where(conds ...gen.Condition) IApplicantTimeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a applicantTimeDo) Order(conds ...field.Expr) IApplicantTimeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a applicantTimeDo) Distinct(cols ...field.Expr) IApplicantTimeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a applicantTimeDo) Omit(cols ...field.Expr) IApplicantTimeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a applicantTimeDo) Join(table schema.Tabler, on ...field.Expr) IApplicantTimeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a applicantTimeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IApplicantTimeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a applicantTimeDo) RightJoin(table schema.Tabler, on ...field.Expr) IApplicantTimeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a applicantTimeDo) Group(cols ...field.Expr) IApplicantTimeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a applicantTimeDo) Having(conds ...gen.Condition) IApplicantTimeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a applicantTimeDo) Limit(limit int) IApplicantTimeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a applicantTimeDo) Offset(offset int) IApplicantTimeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a applicantTimeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IApplicantTimeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a applicantTimeDo) Unscoped() IApplicantTimeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a applicantTimeDo) Create(values ...*model.ApplicantTime) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a applicantTimeDo) CreateInBatches(values []*model.ApplicantTime, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a applicantTimeDo) Save(values ...*model.ApplicantTime) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a applicantTimeDo) First() (*model.ApplicantTime, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApplicantTime), nil
	}
}

func (a applicantTimeDo) Take() (*model.ApplicantTime, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApplicantTime), nil
	}
}

func (a applicantTimeDo) Last() (*model.ApplicantTime, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApplicantTime), nil
	}
}

func (a applicantTimeDo) Find() ([]*model.ApplicantTime, error) {
	result, err := a.DO.Find()
	return result.([]*model.ApplicantTime), err
}

func (a applicantTimeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ApplicantTime, err error) {
	buf := make([]*model.ApplicantTime, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a applicantTimeDo) FindInBatches(result *[]*model.ApplicantTime, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a applicantTimeDo) Attrs(attrs ...field.AssignExpr) IApplicantTimeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a applicantTimeDo) Assign(attrs ...field.AssignExpr) IApplicantTimeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a applicantTimeDo) Joins(fields ...field.RelationField) IApplicantTimeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a applicantTimeDo) Preload(fields ...field.RelationField) IApplicantTimeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a applicantTimeDo) FirstOrInit() (*model.ApplicantTime, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApplicantTime), nil
	}
}

func (a applicantTimeDo) FirstOrCreate() (*model.ApplicantTime, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ApplicantTime), nil
	}
}

func (a applicantTimeDo) FindByPage(offset int, limit int) (result []*model.ApplicantTime, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a applicantTimeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a applicantTimeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a applicantTimeDo) Delete(models ...*model.ApplicantTime) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *applicantTimeDo) withDO(do gen.Dao) *applicantTimeDo {
	a.DO = *do.(*gen.DO)
	return a
}
