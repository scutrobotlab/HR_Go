// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"HR_Go/dal/model"
)

func newApplicant(db *gorm.DB, opts ...gen.DOOption) applicant {
	_applicant := applicant{}

	_applicant.applicantDo.UseDB(db, opts...)
	_applicant.applicantDo.UseModel(&model.Applicant{})

	tableName := _applicant.applicantDo.TableName()
	_applicant.ALL = field.NewAsterisk(tableName)
	_applicant.ID = field.NewInt64(tableName, "id")
	_applicant.WechatID = field.NewString(tableName, "wechat_id")
	_applicant.Name = field.NewString(tableName, "name")
	_applicant.Gender = field.NewInt32(tableName, "gender")
	_applicant.Phone = field.NewString(tableName, "phone")
	_applicant.Avatar = field.NewString(tableName, "avatar")
	_applicant.Profile = field.NewString(tableName, "profile")
	_applicant.Form = field.NewString(tableName, "form")
	_applicant.DeletedAt = field.NewField(tableName, "deleted_at")
	_applicant.CreatedAt = field.NewTime(tableName, "created_at")
	_applicant.UpdatedAt = field.NewTime(tableName, "updated_at")

	_applicant.fillFieldMap()

	return _applicant
}

type applicant struct {
	applicantDo

	ALL       field.Asterisk
	ID        field.Int64
	WechatID  field.String // 微信OpenID
	Name      field.String // 姓名
	Gender    field.Int32  // 性别 0-未知 1-男性 2-女性 9-未说明
	Phone     field.String // 手机号码
	Avatar    field.String // 头像URL
	Profile   field.String // 微信简介
	Form      field.String // 申请表单
	DeletedAt field.Field
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a applicant) Table(newTableName string) *applicant {
	a.applicantDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a applicant) As(alias string) *applicant {
	a.applicantDo.DO = *(a.applicantDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *applicant) updateTableName(table string) *applicant {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.WechatID = field.NewString(table, "wechat_id")
	a.Name = field.NewString(table, "name")
	a.Gender = field.NewInt32(table, "gender")
	a.Phone = field.NewString(table, "phone")
	a.Avatar = field.NewString(table, "avatar")
	a.Profile = field.NewString(table, "profile")
	a.Form = field.NewString(table, "form")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *applicant) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *applicant) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["wechat_id"] = a.WechatID
	a.fieldMap["name"] = a.Name
	a.fieldMap["gender"] = a.Gender
	a.fieldMap["phone"] = a.Phone
	a.fieldMap["avatar"] = a.Avatar
	a.fieldMap["profile"] = a.Profile
	a.fieldMap["form"] = a.Form
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a applicant) clone(db *gorm.DB) applicant {
	a.applicantDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a applicant) replaceDB(db *gorm.DB) applicant {
	a.applicantDo.ReplaceDB(db)
	return a
}

type applicantDo struct{ gen.DO }

type IApplicantDo interface {
	gen.SubQuery
	Debug() IApplicantDo
	WithContext(ctx context.Context) IApplicantDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IApplicantDo
	WriteDB() IApplicantDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IApplicantDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IApplicantDo
	Not(conds ...gen.Condition) IApplicantDo
	Or(conds ...gen.Condition) IApplicantDo
	Select(conds ...field.Expr) IApplicantDo
	Where(conds ...gen.Condition) IApplicantDo
	Order(conds ...field.Expr) IApplicantDo
	Distinct(cols ...field.Expr) IApplicantDo
	Omit(cols ...field.Expr) IApplicantDo
	Join(table schema.Tabler, on ...field.Expr) IApplicantDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IApplicantDo
	RightJoin(table schema.Tabler, on ...field.Expr) IApplicantDo
	Group(cols ...field.Expr) IApplicantDo
	Having(conds ...gen.Condition) IApplicantDo
	Limit(limit int) IApplicantDo
	Offset(offset int) IApplicantDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IApplicantDo
	Unscoped() IApplicantDo
	Create(values ...*model.Applicant) error
	CreateInBatches(values []*model.Applicant, batchSize int) error
	Save(values ...*model.Applicant) error
	First() (*model.Applicant, error)
	Take() (*model.Applicant, error)
	Last() (*model.Applicant, error)
	Find() ([]*model.Applicant, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Applicant, err error)
	FindInBatches(result *[]*model.Applicant, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Applicant) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IApplicantDo
	Assign(attrs ...field.AssignExpr) IApplicantDo
	Joins(fields ...field.RelationField) IApplicantDo
	Preload(fields ...field.RelationField) IApplicantDo
	FirstOrInit() (*model.Applicant, error)
	FirstOrCreate() (*model.Applicant, error)
	FindByPage(offset int, limit int) (result []*model.Applicant, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IApplicantDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a applicantDo) Debug() IApplicantDo {
	return a.withDO(a.DO.Debug())
}

func (a applicantDo) WithContext(ctx context.Context) IApplicantDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a applicantDo) ReadDB() IApplicantDo {
	return a.Clauses(dbresolver.Read)
}

func (a applicantDo) WriteDB() IApplicantDo {
	return a.Clauses(dbresolver.Write)
}

func (a applicantDo) Session(config *gorm.Session) IApplicantDo {
	return a.withDO(a.DO.Session(config))
}

func (a applicantDo) Clauses(conds ...clause.Expression) IApplicantDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a applicantDo) Returning(value interface{}, columns ...string) IApplicantDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a applicantDo) Not(conds ...gen.Condition) IApplicantDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a applicantDo) Or(conds ...gen.Condition) IApplicantDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a applicantDo) Select(conds ...field.Expr) IApplicantDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a applicantDo) Where(conds ...gen.Condition) IApplicantDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a applicantDo) Order(conds ...field.Expr) IApplicantDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a applicantDo) Distinct(cols ...field.Expr) IApplicantDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a applicantDo) Omit(cols ...field.Expr) IApplicantDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a applicantDo) Join(table schema.Tabler, on ...field.Expr) IApplicantDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a applicantDo) LeftJoin(table schema.Tabler, on ...field.Expr) IApplicantDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a applicantDo) RightJoin(table schema.Tabler, on ...field.Expr) IApplicantDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a applicantDo) Group(cols ...field.Expr) IApplicantDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a applicantDo) Having(conds ...gen.Condition) IApplicantDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a applicantDo) Limit(limit int) IApplicantDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a applicantDo) Offset(offset int) IApplicantDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a applicantDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IApplicantDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a applicantDo) Unscoped() IApplicantDo {
	return a.withDO(a.DO.Unscoped())
}

func (a applicantDo) Create(values ...*model.Applicant) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a applicantDo) CreateInBatches(values []*model.Applicant, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a applicantDo) Save(values ...*model.Applicant) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a applicantDo) First() (*model.Applicant, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Applicant), nil
	}
}

func (a applicantDo) Take() (*model.Applicant, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Applicant), nil
	}
}

func (a applicantDo) Last() (*model.Applicant, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Applicant), nil
	}
}

func (a applicantDo) Find() ([]*model.Applicant, error) {
	result, err := a.DO.Find()
	return result.([]*model.Applicant), err
}

func (a applicantDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Applicant, err error) {
	buf := make([]*model.Applicant, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a applicantDo) FindInBatches(result *[]*model.Applicant, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a applicantDo) Attrs(attrs ...field.AssignExpr) IApplicantDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a applicantDo) Assign(attrs ...field.AssignExpr) IApplicantDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a applicantDo) Joins(fields ...field.RelationField) IApplicantDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a applicantDo) Preload(fields ...field.RelationField) IApplicantDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a applicantDo) FirstOrInit() (*model.Applicant, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Applicant), nil
	}
}

func (a applicantDo) FirstOrCreate() (*model.Applicant, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Applicant), nil
	}
}

func (a applicantDo) FindByPage(offset int, limit int) (result []*model.Applicant, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a applicantDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a applicantDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a applicantDo) Delete(models ...*model.Applicant) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *applicantDo) withDO(do gen.Dao) *applicantDo {
	a.DO = *do.(*gen.DO)
	return a
}
