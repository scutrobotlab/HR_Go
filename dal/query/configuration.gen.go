// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"HR_Go/dal/model"
)

func newConfiguration(db *gorm.DB, opts ...gen.DOOption) configuration {
	_configuration := configuration{}

	_configuration.configurationDo.UseDB(db, opts...)
	_configuration.configurationDo.UseModel(&model.Configuration{})

	tableName := _configuration.configurationDo.TableName()
	_configuration.ALL = field.NewAsterisk(tableName)
	_configuration.ID = field.NewInt64(tableName, "id")
	_configuration.Key = field.NewString(tableName, "key")
	_configuration.Value = field.NewString(tableName, "value")
	_configuration.DeletedAt = field.NewField(tableName, "deleted_at")
	_configuration.CreatedAt = field.NewTime(tableName, "created_at")
	_configuration.UpdatedAt = field.NewTime(tableName, "updated_at")

	_configuration.fillFieldMap()

	return _configuration
}

type configuration struct {
	configurationDo

	ALL       field.Asterisk
	ID        field.Int64  // ID
	Key       field.String // 键
	Value     field.String // 值
	DeletedAt field.Field  // 删除时间
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (c configuration) Table(newTableName string) *configuration {
	c.configurationDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c configuration) As(alias string) *configuration {
	c.configurationDo.DO = *(c.configurationDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *configuration) updateTableName(table string) *configuration {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.Key = field.NewString(table, "key")
	c.Value = field.NewString(table, "value")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")

	c.fillFieldMap()

	return c
}

func (c *configuration) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *configuration) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["key"] = c.Key
	c.fieldMap["value"] = c.Value
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
}

func (c configuration) clone(db *gorm.DB) configuration {
	c.configurationDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c configuration) replaceDB(db *gorm.DB) configuration {
	c.configurationDo.ReplaceDB(db)
	return c
}

type configurationDo struct{ gen.DO }

type IConfigurationDo interface {
	gen.SubQuery
	Debug() IConfigurationDo
	WithContext(ctx context.Context) IConfigurationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IConfigurationDo
	WriteDB() IConfigurationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IConfigurationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IConfigurationDo
	Not(conds ...gen.Condition) IConfigurationDo
	Or(conds ...gen.Condition) IConfigurationDo
	Select(conds ...field.Expr) IConfigurationDo
	Where(conds ...gen.Condition) IConfigurationDo
	Order(conds ...field.Expr) IConfigurationDo
	Distinct(cols ...field.Expr) IConfigurationDo
	Omit(cols ...field.Expr) IConfigurationDo
	Join(table schema.Tabler, on ...field.Expr) IConfigurationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IConfigurationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IConfigurationDo
	Group(cols ...field.Expr) IConfigurationDo
	Having(conds ...gen.Condition) IConfigurationDo
	Limit(limit int) IConfigurationDo
	Offset(offset int) IConfigurationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigurationDo
	Unscoped() IConfigurationDo
	Create(values ...*model.Configuration) error
	CreateInBatches(values []*model.Configuration, batchSize int) error
	Save(values ...*model.Configuration) error
	First() (*model.Configuration, error)
	Take() (*model.Configuration, error)
	Last() (*model.Configuration, error)
	Find() ([]*model.Configuration, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Configuration, err error)
	FindInBatches(result *[]*model.Configuration, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Configuration) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IConfigurationDo
	Assign(attrs ...field.AssignExpr) IConfigurationDo
	Joins(fields ...field.RelationField) IConfigurationDo
	Preload(fields ...field.RelationField) IConfigurationDo
	FirstOrInit() (*model.Configuration, error)
	FirstOrCreate() (*model.Configuration, error)
	FindByPage(offset int, limit int) (result []*model.Configuration, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IConfigurationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c configurationDo) Debug() IConfigurationDo {
	return c.withDO(c.DO.Debug())
}

func (c configurationDo) WithContext(ctx context.Context) IConfigurationDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c configurationDo) ReadDB() IConfigurationDo {
	return c.Clauses(dbresolver.Read)
}

func (c configurationDo) WriteDB() IConfigurationDo {
	return c.Clauses(dbresolver.Write)
}

func (c configurationDo) Session(config *gorm.Session) IConfigurationDo {
	return c.withDO(c.DO.Session(config))
}

func (c configurationDo) Clauses(conds ...clause.Expression) IConfigurationDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c configurationDo) Returning(value interface{}, columns ...string) IConfigurationDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c configurationDo) Not(conds ...gen.Condition) IConfigurationDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c configurationDo) Or(conds ...gen.Condition) IConfigurationDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c configurationDo) Select(conds ...field.Expr) IConfigurationDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c configurationDo) Where(conds ...gen.Condition) IConfigurationDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c configurationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IConfigurationDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c configurationDo) Order(conds ...field.Expr) IConfigurationDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c configurationDo) Distinct(cols ...field.Expr) IConfigurationDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c configurationDo) Omit(cols ...field.Expr) IConfigurationDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c configurationDo) Join(table schema.Tabler, on ...field.Expr) IConfigurationDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c configurationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IConfigurationDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c configurationDo) RightJoin(table schema.Tabler, on ...field.Expr) IConfigurationDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c configurationDo) Group(cols ...field.Expr) IConfigurationDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c configurationDo) Having(conds ...gen.Condition) IConfigurationDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c configurationDo) Limit(limit int) IConfigurationDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c configurationDo) Offset(offset int) IConfigurationDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c configurationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IConfigurationDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c configurationDo) Unscoped() IConfigurationDo {
	return c.withDO(c.DO.Unscoped())
}

func (c configurationDo) Create(values ...*model.Configuration) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c configurationDo) CreateInBatches(values []*model.Configuration, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c configurationDo) Save(values ...*model.Configuration) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c configurationDo) First() (*model.Configuration, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Configuration), nil
	}
}

func (c configurationDo) Take() (*model.Configuration, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Configuration), nil
	}
}

func (c configurationDo) Last() (*model.Configuration, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Configuration), nil
	}
}

func (c configurationDo) Find() ([]*model.Configuration, error) {
	result, err := c.DO.Find()
	return result.([]*model.Configuration), err
}

func (c configurationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Configuration, err error) {
	buf := make([]*model.Configuration, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c configurationDo) FindInBatches(result *[]*model.Configuration, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c configurationDo) Attrs(attrs ...field.AssignExpr) IConfigurationDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c configurationDo) Assign(attrs ...field.AssignExpr) IConfigurationDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c configurationDo) Joins(fields ...field.RelationField) IConfigurationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c configurationDo) Preload(fields ...field.RelationField) IConfigurationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c configurationDo) FirstOrInit() (*model.Configuration, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Configuration), nil
	}
}

func (c configurationDo) FirstOrCreate() (*model.Configuration, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Configuration), nil
	}
}

func (c configurationDo) FindByPage(offset int, limit int) (result []*model.Configuration, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c configurationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c configurationDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c configurationDo) Delete(models ...*model.Configuration) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *configurationDo) withDO(do gen.Dao) *configurationDo {
	c.DO = *do.(*gen.DO)
	return c
}
