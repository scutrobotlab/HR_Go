// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"HR_Go/dal/model"
)

func newEvaluationStandard(db *gorm.DB, opts ...gen.DOOption) evaluationStandard {
	_evaluationStandard := evaluationStandard{}

	_evaluationStandard.evaluationStandardDo.UseDB(db, opts...)
	_evaluationStandard.evaluationStandardDo.UseModel(&model.EvaluationStandard{})

	tableName := _evaluationStandard.evaluationStandardDo.TableName()
	_evaluationStandard.ALL = field.NewAsterisk(tableName)
	_evaluationStandard.ID = field.NewInt64(tableName, "id")
	_evaluationStandard.Name = field.NewString(tableName, "name")
	_evaluationStandard.Standard = field.NewString(tableName, "standard")
	_evaluationStandard.LastEditAdminID = field.NewInt64(tableName, "last_edit_admin_id")
	_evaluationStandard.DeletedAt = field.NewField(tableName, "deleted_at")
	_evaluationStandard.CreatedAt = field.NewTime(tableName, "created_at")
	_evaluationStandard.UpdatedAt = field.NewTime(tableName, "updated_at")

	_evaluationStandard.fillFieldMap()

	return _evaluationStandard
}

type evaluationStandard struct {
	evaluationStandardDo

	ALL             field.Asterisk
	ID              field.Int64
	Name            field.String // 标准名称
	Standard        field.String // 评估标准
	LastEditAdminID field.Int64  // 最后编辑的管理员ID
	DeletedAt       field.Field
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (e evaluationStandard) Table(newTableName string) *evaluationStandard {
	e.evaluationStandardDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e evaluationStandard) As(alias string) *evaluationStandard {
	e.evaluationStandardDo.DO = *(e.evaluationStandardDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *evaluationStandard) updateTableName(table string) *evaluationStandard {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Name = field.NewString(table, "name")
	e.Standard = field.NewString(table, "standard")
	e.LastEditAdminID = field.NewInt64(table, "last_edit_admin_id")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")

	e.fillFieldMap()

	return e
}

func (e *evaluationStandard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *evaluationStandard) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["standard"] = e.Standard
	e.fieldMap["last_edit_admin_id"] = e.LastEditAdminID
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
}

func (e evaluationStandard) clone(db *gorm.DB) evaluationStandard {
	e.evaluationStandardDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e evaluationStandard) replaceDB(db *gorm.DB) evaluationStandard {
	e.evaluationStandardDo.ReplaceDB(db)
	return e
}

type evaluationStandardDo struct{ gen.DO }

type IEvaluationStandardDo interface {
	gen.SubQuery
	Debug() IEvaluationStandardDo
	WithContext(ctx context.Context) IEvaluationStandardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEvaluationStandardDo
	WriteDB() IEvaluationStandardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEvaluationStandardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEvaluationStandardDo
	Not(conds ...gen.Condition) IEvaluationStandardDo
	Or(conds ...gen.Condition) IEvaluationStandardDo
	Select(conds ...field.Expr) IEvaluationStandardDo
	Where(conds ...gen.Condition) IEvaluationStandardDo
	Order(conds ...field.Expr) IEvaluationStandardDo
	Distinct(cols ...field.Expr) IEvaluationStandardDo
	Omit(cols ...field.Expr) IEvaluationStandardDo
	Join(table schema.Tabler, on ...field.Expr) IEvaluationStandardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEvaluationStandardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEvaluationStandardDo
	Group(cols ...field.Expr) IEvaluationStandardDo
	Having(conds ...gen.Condition) IEvaluationStandardDo
	Limit(limit int) IEvaluationStandardDo
	Offset(offset int) IEvaluationStandardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEvaluationStandardDo
	Unscoped() IEvaluationStandardDo
	Create(values ...*model.EvaluationStandard) error
	CreateInBatches(values []*model.EvaluationStandard, batchSize int) error
	Save(values ...*model.EvaluationStandard) error
	First() (*model.EvaluationStandard, error)
	Take() (*model.EvaluationStandard, error)
	Last() (*model.EvaluationStandard, error)
	Find() ([]*model.EvaluationStandard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EvaluationStandard, err error)
	FindInBatches(result *[]*model.EvaluationStandard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EvaluationStandard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEvaluationStandardDo
	Assign(attrs ...field.AssignExpr) IEvaluationStandardDo
	Joins(fields ...field.RelationField) IEvaluationStandardDo
	Preload(fields ...field.RelationField) IEvaluationStandardDo
	FirstOrInit() (*model.EvaluationStandard, error)
	FirstOrCreate() (*model.EvaluationStandard, error)
	FindByPage(offset int, limit int) (result []*model.EvaluationStandard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEvaluationStandardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e evaluationStandardDo) Debug() IEvaluationStandardDo {
	return e.withDO(e.DO.Debug())
}

func (e evaluationStandardDo) WithContext(ctx context.Context) IEvaluationStandardDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e evaluationStandardDo) ReadDB() IEvaluationStandardDo {
	return e.Clauses(dbresolver.Read)
}

func (e evaluationStandardDo) WriteDB() IEvaluationStandardDo {
	return e.Clauses(dbresolver.Write)
}

func (e evaluationStandardDo) Session(config *gorm.Session) IEvaluationStandardDo {
	return e.withDO(e.DO.Session(config))
}

func (e evaluationStandardDo) Clauses(conds ...clause.Expression) IEvaluationStandardDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e evaluationStandardDo) Returning(value interface{}, columns ...string) IEvaluationStandardDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e evaluationStandardDo) Not(conds ...gen.Condition) IEvaluationStandardDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e evaluationStandardDo) Or(conds ...gen.Condition) IEvaluationStandardDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e evaluationStandardDo) Select(conds ...field.Expr) IEvaluationStandardDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e evaluationStandardDo) Where(conds ...gen.Condition) IEvaluationStandardDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e evaluationStandardDo) Order(conds ...field.Expr) IEvaluationStandardDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e evaluationStandardDo) Distinct(cols ...field.Expr) IEvaluationStandardDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e evaluationStandardDo) Omit(cols ...field.Expr) IEvaluationStandardDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e evaluationStandardDo) Join(table schema.Tabler, on ...field.Expr) IEvaluationStandardDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e evaluationStandardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEvaluationStandardDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e evaluationStandardDo) RightJoin(table schema.Tabler, on ...field.Expr) IEvaluationStandardDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e evaluationStandardDo) Group(cols ...field.Expr) IEvaluationStandardDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e evaluationStandardDo) Having(conds ...gen.Condition) IEvaluationStandardDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e evaluationStandardDo) Limit(limit int) IEvaluationStandardDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e evaluationStandardDo) Offset(offset int) IEvaluationStandardDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e evaluationStandardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEvaluationStandardDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e evaluationStandardDo) Unscoped() IEvaluationStandardDo {
	return e.withDO(e.DO.Unscoped())
}

func (e evaluationStandardDo) Create(values ...*model.EvaluationStandard) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e evaluationStandardDo) CreateInBatches(values []*model.EvaluationStandard, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e evaluationStandardDo) Save(values ...*model.EvaluationStandard) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e evaluationStandardDo) First() (*model.EvaluationStandard, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluationStandard), nil
	}
}

func (e evaluationStandardDo) Take() (*model.EvaluationStandard, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluationStandard), nil
	}
}

func (e evaluationStandardDo) Last() (*model.EvaluationStandard, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluationStandard), nil
	}
}

func (e evaluationStandardDo) Find() ([]*model.EvaluationStandard, error) {
	result, err := e.DO.Find()
	return result.([]*model.EvaluationStandard), err
}

func (e evaluationStandardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EvaluationStandard, err error) {
	buf := make([]*model.EvaluationStandard, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e evaluationStandardDo) FindInBatches(result *[]*model.EvaluationStandard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e evaluationStandardDo) Attrs(attrs ...field.AssignExpr) IEvaluationStandardDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e evaluationStandardDo) Assign(attrs ...field.AssignExpr) IEvaluationStandardDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e evaluationStandardDo) Joins(fields ...field.RelationField) IEvaluationStandardDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e evaluationStandardDo) Preload(fields ...field.RelationField) IEvaluationStandardDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e evaluationStandardDo) FirstOrInit() (*model.EvaluationStandard, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluationStandard), nil
	}
}

func (e evaluationStandardDo) FirstOrCreate() (*model.EvaluationStandard, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluationStandard), nil
	}
}

func (e evaluationStandardDo) FindByPage(offset int, limit int) (result []*model.EvaluationStandard, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e evaluationStandardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e evaluationStandardDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e evaluationStandardDo) Delete(models ...*model.EvaluationStandard) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *evaluationStandardDo) withDO(do gen.Dao) *evaluationStandardDo {
	e.DO = *do.(*gen.DO)
	return e
}
