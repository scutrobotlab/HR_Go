// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                  = new(Query)
	Admin              *admin
	Admit              *admit
	AnnounceConfig     *announceConfig
	Applicant          *applicant
	ApplicantQuestion  *applicantQuestion
	ApplicantSm        *applicantSm
	ApplicantTime      *applicantTime
	Configuration      *configuration
	EvaluationStandard *evaluationStandard
	Form               *form
	Guide              *guide
	Intent             *intent
	Question           *question
	ReceiveSm          *receiveSm
	Remark             *remark
	Room               *room
	Score              *score
	Time               *time
	TimeConfig         *timeConfig
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Admin = &Q.Admin
	Admit = &Q.Admit
	AnnounceConfig = &Q.AnnounceConfig
	Applicant = &Q.Applicant
	ApplicantQuestion = &Q.ApplicantQuestion
	ApplicantSm = &Q.ApplicantSm
	ApplicantTime = &Q.ApplicantTime
	Configuration = &Q.Configuration
	EvaluationStandard = &Q.EvaluationStandard
	Form = &Q.Form
	Guide = &Q.Guide
	Intent = &Q.Intent
	Question = &Q.Question
	ReceiveSm = &Q.ReceiveSm
	Remark = &Q.Remark
	Room = &Q.Room
	Score = &Q.Score
	Time = &Q.Time
	TimeConfig = &Q.TimeConfig
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                 db,
		Admin:              newAdmin(db, opts...),
		Admit:              newAdmit(db, opts...),
		AnnounceConfig:     newAnnounceConfig(db, opts...),
		Applicant:          newApplicant(db, opts...),
		ApplicantQuestion:  newApplicantQuestion(db, opts...),
		ApplicantSm:        newApplicantSm(db, opts...),
		ApplicantTime:      newApplicantTime(db, opts...),
		Configuration:      newConfiguration(db, opts...),
		EvaluationStandard: newEvaluationStandard(db, opts...),
		Form:               newForm(db, opts...),
		Guide:              newGuide(db, opts...),
		Intent:             newIntent(db, opts...),
		Question:           newQuestion(db, opts...),
		ReceiveSm:          newReceiveSm(db, opts...),
		Remark:             newRemark(db, opts...),
		Room:               newRoom(db, opts...),
		Score:              newScore(db, opts...),
		Time:               newTime(db, opts...),
		TimeConfig:         newTimeConfig(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Admin              admin
	Admit              admit
	AnnounceConfig     announceConfig
	Applicant          applicant
	ApplicantQuestion  applicantQuestion
	ApplicantSm        applicantSm
	ApplicantTime      applicantTime
	Configuration      configuration
	EvaluationStandard evaluationStandard
	Form               form
	Guide              guide
	Intent             intent
	Question           question
	ReceiveSm          receiveSm
	Remark             remark
	Room               room
	Score              score
	Time               time
	TimeConfig         timeConfig
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		Admin:              q.Admin.clone(db),
		Admit:              q.Admit.clone(db),
		AnnounceConfig:     q.AnnounceConfig.clone(db),
		Applicant:          q.Applicant.clone(db),
		ApplicantQuestion:  q.ApplicantQuestion.clone(db),
		ApplicantSm:        q.ApplicantSm.clone(db),
		ApplicantTime:      q.ApplicantTime.clone(db),
		Configuration:      q.Configuration.clone(db),
		EvaluationStandard: q.EvaluationStandard.clone(db),
		Form:               q.Form.clone(db),
		Guide:              q.Guide.clone(db),
		Intent:             q.Intent.clone(db),
		Question:           q.Question.clone(db),
		ReceiveSm:          q.ReceiveSm.clone(db),
		Remark:             q.Remark.clone(db),
		Room:               q.Room.clone(db),
		Score:              q.Score.clone(db),
		Time:               q.Time.clone(db),
		TimeConfig:         q.TimeConfig.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		Admin:              q.Admin.replaceDB(db),
		Admit:              q.Admit.replaceDB(db),
		AnnounceConfig:     q.AnnounceConfig.replaceDB(db),
		Applicant:          q.Applicant.replaceDB(db),
		ApplicantQuestion:  q.ApplicantQuestion.replaceDB(db),
		ApplicantSm:        q.ApplicantSm.replaceDB(db),
		ApplicantTime:      q.ApplicantTime.replaceDB(db),
		Configuration:      q.Configuration.replaceDB(db),
		EvaluationStandard: q.EvaluationStandard.replaceDB(db),
		Form:               q.Form.replaceDB(db),
		Guide:              q.Guide.replaceDB(db),
		Intent:             q.Intent.replaceDB(db),
		Question:           q.Question.replaceDB(db),
		ReceiveSm:          q.ReceiveSm.replaceDB(db),
		Remark:             q.Remark.replaceDB(db),
		Room:               q.Room.replaceDB(db),
		Score:              q.Score.replaceDB(db),
		Time:               q.Time.replaceDB(db),
		TimeConfig:         q.TimeConfig.replaceDB(db),
	}
}

type queryCtx struct {
	Admin              IAdminDo
	Admit              IAdmitDo
	AnnounceConfig     IAnnounceConfigDo
	Applicant          IApplicantDo
	ApplicantQuestion  IApplicantQuestionDo
	ApplicantSm        IApplicantSmDo
	ApplicantTime      IApplicantTimeDo
	Configuration      IConfigurationDo
	EvaluationStandard IEvaluationStandardDo
	Form               IFormDo
	Guide              IGuideDo
	Intent             IIntentDo
	Question           IQuestionDo
	ReceiveSm          IReceiveSmDo
	Remark             IRemarkDo
	Room               IRoomDo
	Score              IScoreDo
	Time               ITimeDo
	TimeConfig         ITimeConfigDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:              q.Admin.WithContext(ctx),
		Admit:              q.Admit.WithContext(ctx),
		AnnounceConfig:     q.AnnounceConfig.WithContext(ctx),
		Applicant:          q.Applicant.WithContext(ctx),
		ApplicantQuestion:  q.ApplicantQuestion.WithContext(ctx),
		ApplicantSm:        q.ApplicantSm.WithContext(ctx),
		ApplicantTime:      q.ApplicantTime.WithContext(ctx),
		Configuration:      q.Configuration.WithContext(ctx),
		EvaluationStandard: q.EvaluationStandard.WithContext(ctx),
		Form:               q.Form.WithContext(ctx),
		Guide:              q.Guide.WithContext(ctx),
		Intent:             q.Intent.WithContext(ctx),
		Question:           q.Question.WithContext(ctx),
		ReceiveSm:          q.ReceiveSm.WithContext(ctx),
		Remark:             q.Remark.WithContext(ctx),
		Room:               q.Room.WithContext(ctx),
		Score:              q.Score.WithContext(ctx),
		Time:               q.Time.WithContext(ctx),
		TimeConfig:         q.TimeConfig.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
