// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"HR_Go/dal/model"
)

func newIntent(db *gorm.DB, opts ...gen.DOOption) intent {
	_intent := intent{}

	_intent.intentDo.UseDB(db, opts...)
	_intent.intentDo.UseModel(&model.Intent{})

	tableName := _intent.intentDo.TableName()
	_intent.ALL = field.NewAsterisk(tableName)
	_intent.ID = field.NewInt64(tableName, "id")
	_intent.Rank = field.NewInt32(tableName, "rank")
	_intent.Group_ = field.NewString(tableName, "group")
	_intent.Parallel = field.NewBool(tableName, "parallel")
	_intent.ApplicantID = field.NewInt64(tableName, "applicant_id")
	_intent.DeletedAt = field.NewField(tableName, "deleted_at")
	_intent.CreatedAt = field.NewTime(tableName, "created_at")
	_intent.UpdatedAt = field.NewTime(tableName, "updated_at")

	_intent.fillFieldMap()

	return _intent
}

type intent struct {
	intentDo

	ALL         field.Asterisk
	ID          field.Int64
	Rank        field.Int32  // 意愿顺序
	Group_      field.String // 意愿组别
	Parallel    field.Bool   // 是否平行志愿
	ApplicantID field.Int64  // 申请ID
	DeletedAt   field.Field
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (i intent) Table(newTableName string) *intent {
	i.intentDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i intent) As(alias string) *intent {
	i.intentDo.DO = *(i.intentDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *intent) updateTableName(table string) *intent {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.Rank = field.NewInt32(table, "rank")
	i.Group_ = field.NewString(table, "group")
	i.Parallel = field.NewBool(table, "parallel")
	i.ApplicantID = field.NewInt64(table, "applicant_id")
	i.DeletedAt = field.NewField(table, "deleted_at")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")

	i.fillFieldMap()

	return i
}

func (i *intent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *intent) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 8)
	i.fieldMap["id"] = i.ID
	i.fieldMap["rank"] = i.Rank
	i.fieldMap["group"] = i.Group_
	i.fieldMap["parallel"] = i.Parallel
	i.fieldMap["applicant_id"] = i.ApplicantID
	i.fieldMap["deleted_at"] = i.DeletedAt
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
}

func (i intent) clone(db *gorm.DB) intent {
	i.intentDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i intent) replaceDB(db *gorm.DB) intent {
	i.intentDo.ReplaceDB(db)
	return i
}

type intentDo struct{ gen.DO }

type IIntentDo interface {
	gen.SubQuery
	Debug() IIntentDo
	WithContext(ctx context.Context) IIntentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IIntentDo
	WriteDB() IIntentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IIntentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IIntentDo
	Not(conds ...gen.Condition) IIntentDo
	Or(conds ...gen.Condition) IIntentDo
	Select(conds ...field.Expr) IIntentDo
	Where(conds ...gen.Condition) IIntentDo
	Order(conds ...field.Expr) IIntentDo
	Distinct(cols ...field.Expr) IIntentDo
	Omit(cols ...field.Expr) IIntentDo
	Join(table schema.Tabler, on ...field.Expr) IIntentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IIntentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IIntentDo
	Group(cols ...field.Expr) IIntentDo
	Having(conds ...gen.Condition) IIntentDo
	Limit(limit int) IIntentDo
	Offset(offset int) IIntentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IIntentDo
	Unscoped() IIntentDo
	Create(values ...*model.Intent) error
	CreateInBatches(values []*model.Intent, batchSize int) error
	Save(values ...*model.Intent) error
	First() (*model.Intent, error)
	Take() (*model.Intent, error)
	Last() (*model.Intent, error)
	Find() ([]*model.Intent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Intent, err error)
	FindInBatches(result *[]*model.Intent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Intent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IIntentDo
	Assign(attrs ...field.AssignExpr) IIntentDo
	Joins(fields ...field.RelationField) IIntentDo
	Preload(fields ...field.RelationField) IIntentDo
	FirstOrInit() (*model.Intent, error)
	FirstOrCreate() (*model.Intent, error)
	FindByPage(offset int, limit int) (result []*model.Intent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IIntentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i intentDo) Debug() IIntentDo {
	return i.withDO(i.DO.Debug())
}

func (i intentDo) WithContext(ctx context.Context) IIntentDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i intentDo) ReadDB() IIntentDo {
	return i.Clauses(dbresolver.Read)
}

func (i intentDo) WriteDB() IIntentDo {
	return i.Clauses(dbresolver.Write)
}

func (i intentDo) Session(config *gorm.Session) IIntentDo {
	return i.withDO(i.DO.Session(config))
}

func (i intentDo) Clauses(conds ...clause.Expression) IIntentDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i intentDo) Returning(value interface{}, columns ...string) IIntentDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i intentDo) Not(conds ...gen.Condition) IIntentDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i intentDo) Or(conds ...gen.Condition) IIntentDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i intentDo) Select(conds ...field.Expr) IIntentDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i intentDo) Where(conds ...gen.Condition) IIntentDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i intentDo) Order(conds ...field.Expr) IIntentDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i intentDo) Distinct(cols ...field.Expr) IIntentDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i intentDo) Omit(cols ...field.Expr) IIntentDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i intentDo) Join(table schema.Tabler, on ...field.Expr) IIntentDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i intentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IIntentDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i intentDo) RightJoin(table schema.Tabler, on ...field.Expr) IIntentDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i intentDo) Group(cols ...field.Expr) IIntentDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i intentDo) Having(conds ...gen.Condition) IIntentDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i intentDo) Limit(limit int) IIntentDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i intentDo) Offset(offset int) IIntentDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i intentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IIntentDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i intentDo) Unscoped() IIntentDo {
	return i.withDO(i.DO.Unscoped())
}

func (i intentDo) Create(values ...*model.Intent) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i intentDo) CreateInBatches(values []*model.Intent, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i intentDo) Save(values ...*model.Intent) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i intentDo) First() (*model.Intent, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Intent), nil
	}
}

func (i intentDo) Take() (*model.Intent, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Intent), nil
	}
}

func (i intentDo) Last() (*model.Intent, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Intent), nil
	}
}

func (i intentDo) Find() ([]*model.Intent, error) {
	result, err := i.DO.Find()
	return result.([]*model.Intent), err
}

func (i intentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Intent, err error) {
	buf := make([]*model.Intent, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i intentDo) FindInBatches(result *[]*model.Intent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i intentDo) Attrs(attrs ...field.AssignExpr) IIntentDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i intentDo) Assign(attrs ...field.AssignExpr) IIntentDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i intentDo) Joins(fields ...field.RelationField) IIntentDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i intentDo) Preload(fields ...field.RelationField) IIntentDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i intentDo) FirstOrInit() (*model.Intent, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Intent), nil
	}
}

func (i intentDo) FirstOrCreate() (*model.Intent, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Intent), nil
	}
}

func (i intentDo) FindByPage(offset int, limit int) (result []*model.Intent, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i intentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i intentDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i intentDo) Delete(models ...*model.Intent) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *intentDo) withDO(do gen.Dao) *intentDo {
	i.DO = *do.(*gen.DO)
	return i
}
