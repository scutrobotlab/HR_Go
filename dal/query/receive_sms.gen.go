// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"HR_Go/dal/model"
)

func newReceiveSm(db *gorm.DB, opts ...gen.DOOption) receiveSm {
	_receiveSm := receiveSm{}

	_receiveSm.receiveSmDo.UseDB(db, opts...)
	_receiveSm.receiveSmDo.UseModel(&model.ReceiveSm{})

	tableName := _receiveSm.receiveSmDo.TableName()
	_receiveSm.ALL = field.NewAsterisk(tableName)
	_receiveSm.ID = field.NewInt64(tableName, "id")
	_receiveSm.Phone = field.NewString(tableName, "phone")
	_receiveSm.Content = field.NewString(tableName, "content")
	_receiveSm.DeletedAt = field.NewField(tableName, "deleted_at")
	_receiveSm.CreatedAt = field.NewTime(tableName, "created_at")
	_receiveSm.UpdatedAt = field.NewTime(tableName, "updated_at")

	_receiveSm.fillFieldMap()

	return _receiveSm
}

type receiveSm struct {
	receiveSmDo

	ALL       field.Asterisk
	ID        field.Int64  // ID
	Phone     field.String // 手机号码
	Content   field.String // 内容
	DeletedAt field.Field  // 删除时间
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (r receiveSm) Table(newTableName string) *receiveSm {
	r.receiveSmDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r receiveSm) As(alias string) *receiveSm {
	r.receiveSmDo.DO = *(r.receiveSmDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *receiveSm) updateTableName(table string) *receiveSm {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Phone = field.NewString(table, "phone")
	r.Content = field.NewString(table, "content")
	r.DeletedAt = field.NewField(table, "deleted_at")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *receiveSm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *receiveSm) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["id"] = r.ID
	r.fieldMap["phone"] = r.Phone
	r.fieldMap["content"] = r.Content
	r.fieldMap["deleted_at"] = r.DeletedAt
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r receiveSm) clone(db *gorm.DB) receiveSm {
	r.receiveSmDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r receiveSm) replaceDB(db *gorm.DB) receiveSm {
	r.receiveSmDo.ReplaceDB(db)
	return r
}

type receiveSmDo struct{ gen.DO }

type IReceiveSmDo interface {
	gen.SubQuery
	Debug() IReceiveSmDo
	WithContext(ctx context.Context) IReceiveSmDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReceiveSmDo
	WriteDB() IReceiveSmDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReceiveSmDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReceiveSmDo
	Not(conds ...gen.Condition) IReceiveSmDo
	Or(conds ...gen.Condition) IReceiveSmDo
	Select(conds ...field.Expr) IReceiveSmDo
	Where(conds ...gen.Condition) IReceiveSmDo
	Order(conds ...field.Expr) IReceiveSmDo
	Distinct(cols ...field.Expr) IReceiveSmDo
	Omit(cols ...field.Expr) IReceiveSmDo
	Join(table schema.Tabler, on ...field.Expr) IReceiveSmDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReceiveSmDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReceiveSmDo
	Group(cols ...field.Expr) IReceiveSmDo
	Having(conds ...gen.Condition) IReceiveSmDo
	Limit(limit int) IReceiveSmDo
	Offset(offset int) IReceiveSmDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReceiveSmDo
	Unscoped() IReceiveSmDo
	Create(values ...*model.ReceiveSm) error
	CreateInBatches(values []*model.ReceiveSm, batchSize int) error
	Save(values ...*model.ReceiveSm) error
	First() (*model.ReceiveSm, error)
	Take() (*model.ReceiveSm, error)
	Last() (*model.ReceiveSm, error)
	Find() ([]*model.ReceiveSm, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReceiveSm, err error)
	FindInBatches(result *[]*model.ReceiveSm, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReceiveSm) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReceiveSmDo
	Assign(attrs ...field.AssignExpr) IReceiveSmDo
	Joins(fields ...field.RelationField) IReceiveSmDo
	Preload(fields ...field.RelationField) IReceiveSmDo
	FirstOrInit() (*model.ReceiveSm, error)
	FirstOrCreate() (*model.ReceiveSm, error)
	FindByPage(offset int, limit int) (result []*model.ReceiveSm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReceiveSmDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r receiveSmDo) Debug() IReceiveSmDo {
	return r.withDO(r.DO.Debug())
}

func (r receiveSmDo) WithContext(ctx context.Context) IReceiveSmDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r receiveSmDo) ReadDB() IReceiveSmDo {
	return r.Clauses(dbresolver.Read)
}

func (r receiveSmDo) WriteDB() IReceiveSmDo {
	return r.Clauses(dbresolver.Write)
}

func (r receiveSmDo) Session(config *gorm.Session) IReceiveSmDo {
	return r.withDO(r.DO.Session(config))
}

func (r receiveSmDo) Clauses(conds ...clause.Expression) IReceiveSmDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r receiveSmDo) Returning(value interface{}, columns ...string) IReceiveSmDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r receiveSmDo) Not(conds ...gen.Condition) IReceiveSmDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r receiveSmDo) Or(conds ...gen.Condition) IReceiveSmDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r receiveSmDo) Select(conds ...field.Expr) IReceiveSmDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r receiveSmDo) Where(conds ...gen.Condition) IReceiveSmDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r receiveSmDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IReceiveSmDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r receiveSmDo) Order(conds ...field.Expr) IReceiveSmDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r receiveSmDo) Distinct(cols ...field.Expr) IReceiveSmDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r receiveSmDo) Omit(cols ...field.Expr) IReceiveSmDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r receiveSmDo) Join(table schema.Tabler, on ...field.Expr) IReceiveSmDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r receiveSmDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReceiveSmDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r receiveSmDo) RightJoin(table schema.Tabler, on ...field.Expr) IReceiveSmDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r receiveSmDo) Group(cols ...field.Expr) IReceiveSmDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r receiveSmDo) Having(conds ...gen.Condition) IReceiveSmDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r receiveSmDo) Limit(limit int) IReceiveSmDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r receiveSmDo) Offset(offset int) IReceiveSmDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r receiveSmDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReceiveSmDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r receiveSmDo) Unscoped() IReceiveSmDo {
	return r.withDO(r.DO.Unscoped())
}

func (r receiveSmDo) Create(values ...*model.ReceiveSm) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r receiveSmDo) CreateInBatches(values []*model.ReceiveSm, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r receiveSmDo) Save(values ...*model.ReceiveSm) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r receiveSmDo) First() (*model.ReceiveSm, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReceiveSm), nil
	}
}

func (r receiveSmDo) Take() (*model.ReceiveSm, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReceiveSm), nil
	}
}

func (r receiveSmDo) Last() (*model.ReceiveSm, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReceiveSm), nil
	}
}

func (r receiveSmDo) Find() ([]*model.ReceiveSm, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReceiveSm), err
}

func (r receiveSmDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReceiveSm, err error) {
	buf := make([]*model.ReceiveSm, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r receiveSmDo) FindInBatches(result *[]*model.ReceiveSm, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r receiveSmDo) Attrs(attrs ...field.AssignExpr) IReceiveSmDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r receiveSmDo) Assign(attrs ...field.AssignExpr) IReceiveSmDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r receiveSmDo) Joins(fields ...field.RelationField) IReceiveSmDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r receiveSmDo) Preload(fields ...field.RelationField) IReceiveSmDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r receiveSmDo) FirstOrInit() (*model.ReceiveSm, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReceiveSm), nil
	}
}

func (r receiveSmDo) FirstOrCreate() (*model.ReceiveSm, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReceiveSm), nil
	}
}

func (r receiveSmDo) FindByPage(offset int, limit int) (result []*model.ReceiveSm, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r receiveSmDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r receiveSmDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r receiveSmDo) Delete(models ...*model.ReceiveSm) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *receiveSmDo) withDO(do gen.Dao) *receiveSmDo {
	r.DO = *do.(*gen.DO)
	return r
}
