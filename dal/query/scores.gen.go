// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"HR_Go/dal/model"
)

func newScore(db *gorm.DB, opts ...gen.DOOption) score {
	_score := score{}

	_score.scoreDo.UseDB(db, opts...)
	_score.scoreDo.UseModel(&model.Score{})

	tableName := _score.scoreDo.TableName()
	_score.ALL = field.NewAsterisk(tableName)
	_score.ID = field.NewInt64(tableName, "id")
	_score.AdminID = field.NewInt64(tableName, "admin_id")
	_score.ApplicantID = field.NewInt64(tableName, "applicant_id")
	_score.Group_ = field.NewString(tableName, "group")
	_score.Score = field.NewFloat64(tableName, "score")
	_score.StandardID = field.NewInt64(tableName, "standard_id")
	_score.EvaluationDetails = field.NewString(tableName, "evaluation_details")
	_score.DeletedAt = field.NewField(tableName, "deleted_at")
	_score.CreatedAt = field.NewTime(tableName, "created_at")
	_score.UpdatedAt = field.NewTime(tableName, "updated_at")

	_score.fillFieldMap()

	return _score
}

type score struct {
	scoreDo

	ALL               field.Asterisk
	ID                field.Int64
	AdminID           field.Int64   // 管理员ID
	ApplicantID       field.Int64   // 申请ID
	Group_            field.String  // 组别
	Score             field.Float64 // 打分
	StandardID        field.Int64   // 打分标准
	EvaluationDetails field.String  // 评价详情
	DeletedAt         field.Field
	CreatedAt         field.Time
	UpdatedAt         field.Time

	fieldMap map[string]field.Expr
}

func (s score) Table(newTableName string) *score {
	s.scoreDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s score) As(alias string) *score {
	s.scoreDo.DO = *(s.scoreDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *score) updateTableName(table string) *score {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.AdminID = field.NewInt64(table, "admin_id")
	s.ApplicantID = field.NewInt64(table, "applicant_id")
	s.Group_ = field.NewString(table, "group")
	s.Score = field.NewFloat64(table, "score")
	s.StandardID = field.NewInt64(table, "standard_id")
	s.EvaluationDetails = field.NewString(table, "evaluation_details")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *score) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *score) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["admin_id"] = s.AdminID
	s.fieldMap["applicant_id"] = s.ApplicantID
	s.fieldMap["group"] = s.Group_
	s.fieldMap["score"] = s.Score
	s.fieldMap["standard_id"] = s.StandardID
	s.fieldMap["evaluation_details"] = s.EvaluationDetails
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s score) clone(db *gorm.DB) score {
	s.scoreDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s score) replaceDB(db *gorm.DB) score {
	s.scoreDo.ReplaceDB(db)
	return s
}

type scoreDo struct{ gen.DO }

type IScoreDo interface {
	gen.SubQuery
	Debug() IScoreDo
	WithContext(ctx context.Context) IScoreDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IScoreDo
	WriteDB() IScoreDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IScoreDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IScoreDo
	Not(conds ...gen.Condition) IScoreDo
	Or(conds ...gen.Condition) IScoreDo
	Select(conds ...field.Expr) IScoreDo
	Where(conds ...gen.Condition) IScoreDo
	Order(conds ...field.Expr) IScoreDo
	Distinct(cols ...field.Expr) IScoreDo
	Omit(cols ...field.Expr) IScoreDo
	Join(table schema.Tabler, on ...field.Expr) IScoreDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IScoreDo
	RightJoin(table schema.Tabler, on ...field.Expr) IScoreDo
	Group(cols ...field.Expr) IScoreDo
	Having(conds ...gen.Condition) IScoreDo
	Limit(limit int) IScoreDo
	Offset(offset int) IScoreDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IScoreDo
	Unscoped() IScoreDo
	Create(values ...*model.Score) error
	CreateInBatches(values []*model.Score, batchSize int) error
	Save(values ...*model.Score) error
	First() (*model.Score, error)
	Take() (*model.Score, error)
	Last() (*model.Score, error)
	Find() ([]*model.Score, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Score, err error)
	FindInBatches(result *[]*model.Score, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Score) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IScoreDo
	Assign(attrs ...field.AssignExpr) IScoreDo
	Joins(fields ...field.RelationField) IScoreDo
	Preload(fields ...field.RelationField) IScoreDo
	FirstOrInit() (*model.Score, error)
	FirstOrCreate() (*model.Score, error)
	FindByPage(offset int, limit int) (result []*model.Score, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IScoreDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s scoreDo) Debug() IScoreDo {
	return s.withDO(s.DO.Debug())
}

func (s scoreDo) WithContext(ctx context.Context) IScoreDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s scoreDo) ReadDB() IScoreDo {
	return s.Clauses(dbresolver.Read)
}

func (s scoreDo) WriteDB() IScoreDo {
	return s.Clauses(dbresolver.Write)
}

func (s scoreDo) Session(config *gorm.Session) IScoreDo {
	return s.withDO(s.DO.Session(config))
}

func (s scoreDo) Clauses(conds ...clause.Expression) IScoreDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s scoreDo) Returning(value interface{}, columns ...string) IScoreDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s scoreDo) Not(conds ...gen.Condition) IScoreDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s scoreDo) Or(conds ...gen.Condition) IScoreDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s scoreDo) Select(conds ...field.Expr) IScoreDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s scoreDo) Where(conds ...gen.Condition) IScoreDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s scoreDo) Order(conds ...field.Expr) IScoreDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s scoreDo) Distinct(cols ...field.Expr) IScoreDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s scoreDo) Omit(cols ...field.Expr) IScoreDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s scoreDo) Join(table schema.Tabler, on ...field.Expr) IScoreDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s scoreDo) LeftJoin(table schema.Tabler, on ...field.Expr) IScoreDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s scoreDo) RightJoin(table schema.Tabler, on ...field.Expr) IScoreDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s scoreDo) Group(cols ...field.Expr) IScoreDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s scoreDo) Having(conds ...gen.Condition) IScoreDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s scoreDo) Limit(limit int) IScoreDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s scoreDo) Offset(offset int) IScoreDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s scoreDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IScoreDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s scoreDo) Unscoped() IScoreDo {
	return s.withDO(s.DO.Unscoped())
}

func (s scoreDo) Create(values ...*model.Score) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s scoreDo) CreateInBatches(values []*model.Score, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s scoreDo) Save(values ...*model.Score) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s scoreDo) First() (*model.Score, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Score), nil
	}
}

func (s scoreDo) Take() (*model.Score, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Score), nil
	}
}

func (s scoreDo) Last() (*model.Score, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Score), nil
	}
}

func (s scoreDo) Find() ([]*model.Score, error) {
	result, err := s.DO.Find()
	return result.([]*model.Score), err
}

func (s scoreDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Score, err error) {
	buf := make([]*model.Score, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s scoreDo) FindInBatches(result *[]*model.Score, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s scoreDo) Attrs(attrs ...field.AssignExpr) IScoreDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s scoreDo) Assign(attrs ...field.AssignExpr) IScoreDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s scoreDo) Joins(fields ...field.RelationField) IScoreDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s scoreDo) Preload(fields ...field.RelationField) IScoreDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s scoreDo) FirstOrInit() (*model.Score, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Score), nil
	}
}

func (s scoreDo) FirstOrCreate() (*model.Score, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Score), nil
	}
}

func (s scoreDo) FindByPage(offset int, limit int) (result []*model.Score, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s scoreDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s scoreDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s scoreDo) Delete(models ...*model.Score) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *scoreDo) withDO(do gen.Dao) *scoreDo {
	s.DO = *do.(*gen.DO)
	return s
}
