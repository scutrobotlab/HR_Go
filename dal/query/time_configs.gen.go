// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"HR_Go/dal/model"
)

func newTimeConfig(db *gorm.DB, opts ...gen.DOOption) timeConfig {
	_timeConfig := timeConfig{}

	_timeConfig.timeConfigDo.UseDB(db, opts...)
	_timeConfig.timeConfigDo.UseModel(&model.TimeConfig{})

	tableName := _timeConfig.timeConfigDo.TableName()
	_timeConfig.ALL = field.NewAsterisk(tableName)
	_timeConfig.Key = field.NewString(tableName, "key")
	_timeConfig.Value = field.NewTime(tableName, "value")

	_timeConfig.fillFieldMap()

	return _timeConfig
}

type timeConfig struct {
	timeConfigDo

	ALL   field.Asterisk
	Key   field.String // 键
	Value field.Time   // 值

	fieldMap map[string]field.Expr
}

func (t timeConfig) Table(newTableName string) *timeConfig {
	t.timeConfigDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t timeConfig) As(alias string) *timeConfig {
	t.timeConfigDo.DO = *(t.timeConfigDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *timeConfig) updateTableName(table string) *timeConfig {
	t.ALL = field.NewAsterisk(table)
	t.Key = field.NewString(table, "key")
	t.Value = field.NewTime(table, "value")

	t.fillFieldMap()

	return t
}

func (t *timeConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *timeConfig) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["key"] = t.Key
	t.fieldMap["value"] = t.Value
}

func (t timeConfig) clone(db *gorm.DB) timeConfig {
	t.timeConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t timeConfig) replaceDB(db *gorm.DB) timeConfig {
	t.timeConfigDo.ReplaceDB(db)
	return t
}

type timeConfigDo struct{ gen.DO }

type ITimeConfigDo interface {
	gen.SubQuery
	Debug() ITimeConfigDo
	WithContext(ctx context.Context) ITimeConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITimeConfigDo
	WriteDB() ITimeConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITimeConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITimeConfigDo
	Not(conds ...gen.Condition) ITimeConfigDo
	Or(conds ...gen.Condition) ITimeConfigDo
	Select(conds ...field.Expr) ITimeConfigDo
	Where(conds ...gen.Condition) ITimeConfigDo
	Order(conds ...field.Expr) ITimeConfigDo
	Distinct(cols ...field.Expr) ITimeConfigDo
	Omit(cols ...field.Expr) ITimeConfigDo
	Join(table schema.Tabler, on ...field.Expr) ITimeConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITimeConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITimeConfigDo
	Group(cols ...field.Expr) ITimeConfigDo
	Having(conds ...gen.Condition) ITimeConfigDo
	Limit(limit int) ITimeConfigDo
	Offset(offset int) ITimeConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITimeConfigDo
	Unscoped() ITimeConfigDo
	Create(values ...*model.TimeConfig) error
	CreateInBatches(values []*model.TimeConfig, batchSize int) error
	Save(values ...*model.TimeConfig) error
	First() (*model.TimeConfig, error)
	Take() (*model.TimeConfig, error)
	Last() (*model.TimeConfig, error)
	Find() ([]*model.TimeConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TimeConfig, err error)
	FindInBatches(result *[]*model.TimeConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TimeConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITimeConfigDo
	Assign(attrs ...field.AssignExpr) ITimeConfigDo
	Joins(fields ...field.RelationField) ITimeConfigDo
	Preload(fields ...field.RelationField) ITimeConfigDo
	FirstOrInit() (*model.TimeConfig, error)
	FirstOrCreate() (*model.TimeConfig, error)
	FindByPage(offset int, limit int) (result []*model.TimeConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITimeConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t timeConfigDo) Debug() ITimeConfigDo {
	return t.withDO(t.DO.Debug())
}

func (t timeConfigDo) WithContext(ctx context.Context) ITimeConfigDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t timeConfigDo) ReadDB() ITimeConfigDo {
	return t.Clauses(dbresolver.Read)
}

func (t timeConfigDo) WriteDB() ITimeConfigDo {
	return t.Clauses(dbresolver.Write)
}

func (t timeConfigDo) Session(config *gorm.Session) ITimeConfigDo {
	return t.withDO(t.DO.Session(config))
}

func (t timeConfigDo) Clauses(conds ...clause.Expression) ITimeConfigDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t timeConfigDo) Returning(value interface{}, columns ...string) ITimeConfigDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t timeConfigDo) Not(conds ...gen.Condition) ITimeConfigDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t timeConfigDo) Or(conds ...gen.Condition) ITimeConfigDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t timeConfigDo) Select(conds ...field.Expr) ITimeConfigDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t timeConfigDo) Where(conds ...gen.Condition) ITimeConfigDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t timeConfigDo) Order(conds ...field.Expr) ITimeConfigDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t timeConfigDo) Distinct(cols ...field.Expr) ITimeConfigDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t timeConfigDo) Omit(cols ...field.Expr) ITimeConfigDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t timeConfigDo) Join(table schema.Tabler, on ...field.Expr) ITimeConfigDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t timeConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITimeConfigDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t timeConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ITimeConfigDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t timeConfigDo) Group(cols ...field.Expr) ITimeConfigDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t timeConfigDo) Having(conds ...gen.Condition) ITimeConfigDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t timeConfigDo) Limit(limit int) ITimeConfigDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t timeConfigDo) Offset(offset int) ITimeConfigDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t timeConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITimeConfigDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t timeConfigDo) Unscoped() ITimeConfigDo {
	return t.withDO(t.DO.Unscoped())
}

func (t timeConfigDo) Create(values ...*model.TimeConfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t timeConfigDo) CreateInBatches(values []*model.TimeConfig, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t timeConfigDo) Save(values ...*model.TimeConfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t timeConfigDo) First() (*model.TimeConfig, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TimeConfig), nil
	}
}

func (t timeConfigDo) Take() (*model.TimeConfig, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TimeConfig), nil
	}
}

func (t timeConfigDo) Last() (*model.TimeConfig, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TimeConfig), nil
	}
}

func (t timeConfigDo) Find() ([]*model.TimeConfig, error) {
	result, err := t.DO.Find()
	return result.([]*model.TimeConfig), err
}

func (t timeConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TimeConfig, err error) {
	buf := make([]*model.TimeConfig, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t timeConfigDo) FindInBatches(result *[]*model.TimeConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t timeConfigDo) Attrs(attrs ...field.AssignExpr) ITimeConfigDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t timeConfigDo) Assign(attrs ...field.AssignExpr) ITimeConfigDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t timeConfigDo) Joins(fields ...field.RelationField) ITimeConfigDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t timeConfigDo) Preload(fields ...field.RelationField) ITimeConfigDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t timeConfigDo) FirstOrInit() (*model.TimeConfig, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TimeConfig), nil
	}
}

func (t timeConfigDo) FirstOrCreate() (*model.TimeConfig, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TimeConfig), nil
	}
}

func (t timeConfigDo) FindByPage(offset int, limit int) (result []*model.TimeConfig, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t timeConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t timeConfigDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t timeConfigDo) Delete(models ...*model.TimeConfig) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *timeConfigDo) withDO(do gen.Dao) *timeConfigDo {
	t.DO = *do.(*gen.DO)
	return t
}
