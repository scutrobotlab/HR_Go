// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	admin "HR_Go/hr-admin-api/internal/handler/admin"
	applicant "HR_Go/hr-admin-api/internal/handler/applicant"
	config "HR_Go/hr-admin-api/internal/handler/config"
	evaluation "HR_Go/hr-admin-api/internal/handler/evaluation"
	exam "HR_Go/hr-admin-api/internal/handler/exam"
	remarks "HR_Go/hr-admin-api/internal/handler/remarks"
	room "HR_Go/hr-admin-api/internal/handler/room"
	scores "HR_Go/hr-admin-api/internal/handler/scores"
	sms "HR_Go/hr-admin-api/internal/handler/sms"
	statistics "HR_Go/hr-admin-api/internal/handler/statistics"
	timeconfig "HR_Go/hr-admin-api/internal/handler/timeconfig"
	times "HR_Go/hr-admin-api/internal/handler/times"
	"HR_Go/hr-admin-api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/ping",
				Handler: PingHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/admin"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login/:code",
				Handler: admin.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/frontend-config",
				Handler: admin.GetFrontendConfigHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/admin"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/info",
				Handler: admin.GetAdminInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/logout",
				Handler: admin.LogoutHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/set-default-standard",
				Handler: admin.SetDefaultStandardHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/oauth",
				Handler: admin.GetOAuthConfigHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/admin"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/info/:id",
				Handler: applicant.GetApplicantInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/scores/:id",
				Handler: applicant.GetApplicantScoresHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/group",
				Handler: applicant.GetApplicantGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/name-list",
				Handler: applicant.GetNameListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/admit/set",
				Handler: applicant.AdmitSetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/admit/reset",
				Handler: applicant.AdmitResetHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/:id",
				Handler: applicant.DeleteApplicantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/at-ext/:applicant_id/:group",
				Handler: applicant.SetApplicantTimeExtendHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/admin/applicant"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/key/:key",
				Handler: config.GetConfigHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/key/:key",
				Handler: config.SetConfigHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/sms-service",
				Handler: config.GetSmsServiceConfigHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/admin/config"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/info/:id",
				Handler: evaluation.GetEvaluationInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list",
				Handler: evaluation.GetEvaluationListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add",
				Handler: evaluation.AddEvaluationHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: evaluation.UpdateEvaluationHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: evaluation.DeleteEvaluationHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/admin/evaluation"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/group/:group",
				Handler: exam.GetExamGroupHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/create",
				Handler: exam.CreateExamHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/delete/:id",
				Handler: exam.DeleteExamHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: exam.UpdateExamHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/id",
				Handler: exam.GetExamByApplicantIdHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/admin/exam"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/:id",
				Handler: remarks.GetRemarksHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/:id",
				Handler: remarks.PostRemarksHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/:id",
				Handler: remarks.DeleteRemarksHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/list/:id",
				Handler: remarks.GetRemarksListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/admin/remarks"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/:id",
				Handler: scores.GetScoresHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/:id",
				Handler: scores.PostScoreHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/:id",
				Handler: scores.DeleteScoreHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/admin/scores"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/:group/:id",
				Handler: scores.GetRankHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/admin/rank"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/dailynew",
				Handler: statistics.GetDailyNewHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/class",
				Handler: statistics.GetClassHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/admin/statistics"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: timeconfig.PostTimeConfigHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/admin/time-config"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/statistics",
				Handler: times.GetStatisticsHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/clear",
				Handler: times.ClearTimeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/export",
				Handler: times.GetExportHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/upload",
				Handler: times.PostUploadHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/schedule",
				Handler: times.GetScheduleHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/admin/times"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/receive",
				Handler: sms.ReceiveSmsHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/admin/sms"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/config",
				Handler: sms.GetSmsConfigHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/applicant/:type",
				Handler: sms.GetApplicantSmsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/send",
				Handler: sms.SendSmsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/history/:id",
				Handler: sms.GetHistorySmsHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/admin/sms"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/all",
				Handler: room.GetAllRoomHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/my",
				Handler: room.SetMyRoomHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/pushable",
				Handler: room.GetPushableListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/push",
				Handler: room.PushApplicantHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/status",
				Handler: room.SetRoomStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/comment/:roomId",
				Handler: room.SetRoomCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/group",
				Handler: room.SetRoomGroupHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/admin/room"),
	)
}
