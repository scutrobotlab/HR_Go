// Code generated by goctl. DO NOT EDIT.
// Source: admin.proto

package hrservice

import (
	"context"

	"HR_Go/hr-admin-service/pb/hr-admin-service"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AbstractAdmin             = hr_admin_service.AbstractAdmin
	AddEvaluationReq          = hr_admin_service.AddEvaluationReq
	AddEvaluationResp         = hr_admin_service.AddEvaluationResp
	Admin                     = hr_admin_service.Admin
	AdminGroup                = hr_admin_service.AdminGroup
	AdminIdReq                = hr_admin_service.AdminIdReq
	AdminLoginByPasswordReq   = hr_admin_service.AdminLoginByPasswordReq
	AdminLoginReq             = hr_admin_service.AdminLoginReq
	AdminLoginResp            = hr_admin_service.AdminLoginResp
	Admit                     = hr_admin_service.Admit
	Applicant                 = hr_admin_service.Applicant
	ApplicantIdReq            = hr_admin_service.ApplicantIdReq
	ApplicantListItem         = hr_admin_service.ApplicantListItem
	ApplicantSms              = hr_admin_service.ApplicantSms
	ClearTimesReq             = hr_admin_service.ClearTimesReq
	CreateAdminReq            = hr_admin_service.CreateAdminReq
	CreateAdminResp           = hr_admin_service.CreateAdminResp
	CreateQuestionReq         = hr_admin_service.CreateQuestionReq
	CreateQuestionResp        = hr_admin_service.CreateQuestionResp
	DeleteAdminReq            = hr_admin_service.DeleteAdminReq
	DeleteApplicantReq        = hr_admin_service.DeleteApplicantReq
	DeleteEvaluationReq       = hr_admin_service.DeleteEvaluationReq
	DeleteQuestionReq         = hr_admin_service.DeleteQuestionReq
	DeleteRemarkReq           = hr_admin_service.DeleteRemarkReq
	DeleteScoreReq            = hr_admin_service.DeleteScoreReq
	Evaluation                = hr_admin_service.Evaluation
	ExportTimesReq            = hr_admin_service.ExportTimesReq
	ExportTimesResp           = hr_admin_service.ExportTimesResp
	GetAdminInfoResp          = hr_admin_service.GetAdminInfoResp
	GetAllRoomResp            = hr_admin_service.GetAllRoomResp
	GetApplicantInfoResp      = hr_admin_service.GetApplicantInfoResp
	GetApplicantNameListResp  = hr_admin_service.GetApplicantNameListResp
	GetApplicantQuestionsResp = hr_admin_service.GetApplicantQuestionsResp
	GetApplicantScoresResp    = hr_admin_service.GetApplicantScoresResp
	GetApplicantSmsReq        = hr_admin_service.GetApplicantSmsReq
	GetApplicantSmsResp       = hr_admin_service.GetApplicantSmsResp
	GetApplicantsReq          = hr_admin_service.GetApplicantsReq
	GetApplicantsResp         = hr_admin_service.GetApplicantsResp
	GetConfigReq              = hr_admin_service.GetConfigReq
	GetConfigResp             = hr_admin_service.GetConfigResp
	GetEvaluationInfoReq      = hr_admin_service.GetEvaluationInfoReq
	GetEvaluationInfoResp     = hr_admin_service.GetEvaluationInfoResp
	GetEvaluationsResp        = hr_admin_service.GetEvaluationsResp
	GetFrontendConfigResp     = hr_admin_service.GetFrontendConfigResp
	GetHistorySmsResp         = hr_admin_service.GetHistorySmsResp
	GetOAuthConfigResp        = hr_admin_service.GetOAuthConfigResp
	GetPushableListResp       = hr_admin_service.GetPushableListResp
	GetQuestionsReq           = hr_admin_service.GetQuestionsReq
	GetQuestionsResp          = hr_admin_service.GetQuestionsResp
	GetRankReq                = hr_admin_service.GetRankReq
	GetRankResp               = hr_admin_service.GetRankResp
	GetRemarkListReq          = hr_admin_service.GetRemarkListReq
	GetRemarkListResp         = hr_admin_service.GetRemarkListResp
	GetRemarkReq              = hr_admin_service.GetRemarkReq
	GetRemarkResp             = hr_admin_service.GetRemarkResp
	GetScheduleReq            = hr_admin_service.GetScheduleReq
	GetScheduleResp           = hr_admin_service.GetScheduleResp
	GetScoreReq               = hr_admin_service.GetScoreReq
	GetScoreResp              = hr_admin_service.GetScoreResp
	GetSmsConfigResp          = hr_admin_service.GetSmsConfigResp
	GetSmsServiceConfigResp   = hr_admin_service.GetSmsServiceConfigResp
	GetStatisticsClassifyReq  = hr_admin_service.GetStatisticsClassifyReq
	GetStatisticsClassifyResp = hr_admin_service.GetStatisticsClassifyResp
	GetStatisticsDailyNewResp = hr_admin_service.GetStatisticsDailyNewResp
	GetTimesStatisticsResp    = hr_admin_service.GetTimesStatisticsResp
	HistorySms                = hr_admin_service.HistorySms
	Intent                    = hr_admin_service.Intent
	Link                      = hr_admin_service.Link
	NameListItem              = hr_admin_service.NameListItem
	PingRequest               = hr_admin_service.PingRequest
	PingResponse              = hr_admin_service.PingResponse
	PostRemarkReq             = hr_admin_service.PostRemarkReq
	PostRemarkResp            = hr_admin_service.PostRemarkResp
	PostScoreReq              = hr_admin_service.PostScoreReq
	PostScoreResp             = hr_admin_service.PostScoreResp
	PostTimeConfigReq         = hr_admin_service.PostTimeConfigReq
	PostTimeConfigResp        = hr_admin_service.PostTimeConfigResp
	PushApplicantReq          = hr_admin_service.PushApplicantReq
	PushableApplicant         = hr_admin_service.PushableApplicant
	Question                  = hr_admin_service.Question
	QuestionAndAnswer         = hr_admin_service.QuestionAndAnswer
	ReceiveSmsReq             = hr_admin_service.ReceiveSmsReq
	ReceiveSmsResp            = hr_admin_service.ReceiveSmsResp
	Remark                    = hr_admin_service.Remark
	Room                      = hr_admin_service.Room
	Score                     = hr_admin_service.Score
	SendSmsReq                = hr_admin_service.SendSmsReq
	SetApplicantAdmitReq      = hr_admin_service.SetApplicantAdmitReq
	SetApplicantTimeExtendReq = hr_admin_service.SetApplicantTimeExtendReq
	SetDefaultStandardReq     = hr_admin_service.SetDefaultStandardReq
	SetMyRoomReq              = hr_admin_service.SetMyRoomReq
	SetRoomCommentReq         = hr_admin_service.SetRoomCommentReq
	SetRoomGroupReq           = hr_admin_service.SetRoomGroupReq
	SetRoomStatusReq          = hr_admin_service.SetRoomStatusReq
	Standard                  = hr_admin_service.Standard
	StatisticsClassify        = hr_admin_service.StatisticsClassify
	StatisticsDaily           = hr_admin_service.StatisticsDaily
	StatusResp                = hr_admin_service.StatusResp
	Time                      = hr_admin_service.Time
	TimeConfig                = hr_admin_service.TimeConfig
	TimeItem                  = hr_admin_service.TimeItem
	TimeStatistics            = hr_admin_service.TimeStatistics
	TimeTableItem             = hr_admin_service.TimeTableItem
	UpdateAdminPasswordReq    = hr_admin_service.UpdateAdminPasswordReq
	UpdateAdminReq            = hr_admin_service.UpdateAdminReq
	UpdateAdminResp           = hr_admin_service.UpdateAdminResp
	UpdateConfigReq           = hr_admin_service.UpdateConfigReq
	UpdateConfigResp          = hr_admin_service.UpdateConfigResp
	UpdateEvaluationReq       = hr_admin_service.UpdateEvaluationReq
	UpdateEvaluationResp      = hr_admin_service.UpdateEvaluationResp
	UpdateQuestionReq         = hr_admin_service.UpdateQuestionReq
	UpdateQuestionResp        = hr_admin_service.UpdateQuestionResp
	UploadTimesReq            = hr_admin_service.UploadTimesReq

	HrService interface {
		Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
		SetApplicantAdmit(ctx context.Context, in *SetApplicantAdmitReq, opts ...grpc.CallOption) (*StatusResp, error)
		GetApplicants(ctx context.Context, in *GetApplicantsReq, opts ...grpc.CallOption) (*GetApplicantsResp, error)
		GetApplicantInfo(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetApplicantInfoResp, error)
		GetApplicantNameList(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetApplicantNameListResp, error)
		GetApplicantScores(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetApplicantScoresResp, error)
		DeleteApplicant(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*StatusResp, error)
		SetApplicantTimeExtend(ctx context.Context, in *SetApplicantTimeExtendReq, opts ...grpc.CallOption) (*StatusResp, error)
		AddEvaluation(ctx context.Context, in *AddEvaluationReq, opts ...grpc.CallOption) (*AddEvaluationResp, error)
		DeleteEvaluation(ctx context.Context, in *DeleteEvaluationReq, opts ...grpc.CallOption) (*StatusResp, error)
		UpdateEvaluation(ctx context.Context, in *UpdateEvaluationReq, opts ...grpc.CallOption) (*UpdateEvaluationResp, error)
		GetEvaluationInfo(ctx context.Context, in *GetEvaluationInfoReq, opts ...grpc.CallOption) (*GetEvaluationInfoResp, error)
		GetEvaluations(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetEvaluationsResp, error)
		CreateQuestion(ctx context.Context, in *CreateQuestionReq, opts ...grpc.CallOption) (*CreateQuestionResp, error)
		DeleteQuestion(ctx context.Context, in *DeleteQuestionReq, opts ...grpc.CallOption) (*StatusResp, error)
		UpdateQuestion(ctx context.Context, in *UpdateQuestionReq, opts ...grpc.CallOption) (*UpdateQuestionResp, error)
		GetQuestions(ctx context.Context, in *GetQuestionsReq, opts ...grpc.CallOption) (*GetQuestionsResp, error)
		GetApplicantQuestions(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetApplicantQuestionsResp, error)
		AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error)
		AdminLogout(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*StatusResp, error)
		GetAdminInfo(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetAdminInfoResp, error)
		SetDefaultStandard(ctx context.Context, in *SetDefaultStandardReq, opts ...grpc.CallOption) (*StatusResp, error)
		GetOAuthConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetOAuthConfigResp, error)
		GetFrontendConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetFrontendConfigResp, error)
		AdminLoginByPassword(ctx context.Context, in *AdminLoginByPasswordReq, opts ...grpc.CallOption) (*AdminLoginResp, error)
		UpdateAdminPassword(ctx context.Context, in *UpdateAdminPasswordReq, opts ...grpc.CallOption) (*StatusResp, error)
		CreateAdmin(ctx context.Context, in *CreateAdminReq, opts ...grpc.CallOption) (*CreateAdminResp, error)
		UpdateAdmin(ctx context.Context, in *UpdateAdminReq, opts ...grpc.CallOption) (*UpdateAdminResp, error)
		DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*StatusResp, error)
		GetRank(ctx context.Context, in *GetRankReq, opts ...grpc.CallOption) (*GetRankResp, error)
		GetScore(ctx context.Context, in *GetScoreReq, opts ...grpc.CallOption) (*GetScoreResp, error)
		PostScore(ctx context.Context, in *PostScoreReq, opts ...grpc.CallOption) (*PostScoreResp, error)
		DeleteScore(ctx context.Context, in *DeleteScoreReq, opts ...grpc.CallOption) (*StatusResp, error)
		GetRemark(ctx context.Context, in *GetRemarkReq, opts ...grpc.CallOption) (*GetRemarkResp, error)
		PostRemark(ctx context.Context, in *PostRemarkReq, opts ...grpc.CallOption) (*PostRemarkResp, error)
		DeleteRemark(ctx context.Context, in *DeleteRemarkReq, opts ...grpc.CallOption) (*StatusResp, error)
		GetRemarkList(ctx context.Context, in *GetRemarkListReq, opts ...grpc.CallOption) (*GetRemarkListResp, error)
		GetStatisticsClassify(ctx context.Context, in *GetStatisticsClassifyReq, opts ...grpc.CallOption) (*GetStatisticsClassifyResp, error)
		GetStatisticsDailyNew(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetStatisticsDailyNewResp, error)
		PostTimeConfig(ctx context.Context, in *PostTimeConfigReq, opts ...grpc.CallOption) (*PostTimeConfigResp, error)
		ExportTimes(ctx context.Context, in *ExportTimesReq, opts ...grpc.CallOption) (*ExportTimesResp, error)
		UploadTimes(ctx context.Context, in *UploadTimesReq, opts ...grpc.CallOption) (*StatusResp, error)
		ClearTimes(ctx context.Context, in *ClearTimesReq, opts ...grpc.CallOption) (*StatusResp, error)
		GetTimesStatistics(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetTimesStatisticsResp, error)
		GetSchedule(ctx context.Context, in *GetScheduleReq, opts ...grpc.CallOption) (*GetScheduleResp, error)
		GetSmsConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetSmsConfigResp, error)
		GetApplicantSms(ctx context.Context, in *GetApplicantSmsReq, opts ...grpc.CallOption) (*GetApplicantSmsResp, error)
		SendSms(ctx context.Context, in *SendSmsReq, opts ...grpc.CallOption) (*StatusResp, error)
		GetHistorySms(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetHistorySmsResp, error)
		ReceiveSms(ctx context.Context, in *ReceiveSmsReq, opts ...grpc.CallOption) (*ReceiveSmsResp, error)
		GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error)
		UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error)
		GetSmsServiceConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetSmsServiceConfigResp, error)
		GetAllRoom(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetAllRoomResp, error)
		SetMyRoom(ctx context.Context, in *SetMyRoomReq, opts ...grpc.CallOption) (*StatusResp, error)
		GetPushableList(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetPushableListResp, error)
		PushApplicant(ctx context.Context, in *PushApplicantReq, opts ...grpc.CallOption) (*StatusResp, error)
		SetRoomStatus(ctx context.Context, in *SetRoomStatusReq, opts ...grpc.CallOption) (*StatusResp, error)
		SetRoomComment(ctx context.Context, in *SetRoomCommentReq, opts ...grpc.CallOption) (*StatusResp, error)
		SetRoomGroup(ctx context.Context, in *SetRoomGroupReq, opts ...grpc.CallOption) (*StatusResp, error)
	}

	defaultHrService struct {
		cli zrpc.Client
	}
)

func NewHrService(cli zrpc.Client) HrService {
	return &defaultHrService{
		cli: cli,
	}
}

func (m *defaultHrService) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultHrService) SetApplicantAdmit(ctx context.Context, in *SetApplicantAdmitReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.SetApplicantAdmit(ctx, in, opts...)
}

func (m *defaultHrService) GetApplicants(ctx context.Context, in *GetApplicantsReq, opts ...grpc.CallOption) (*GetApplicantsResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetApplicants(ctx, in, opts...)
}

func (m *defaultHrService) GetApplicantInfo(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetApplicantInfoResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetApplicantInfo(ctx, in, opts...)
}

func (m *defaultHrService) GetApplicantNameList(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetApplicantNameListResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetApplicantNameList(ctx, in, opts...)
}

func (m *defaultHrService) GetApplicantScores(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetApplicantScoresResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetApplicantScores(ctx, in, opts...)
}

func (m *defaultHrService) DeleteApplicant(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.DeleteApplicant(ctx, in, opts...)
}

func (m *defaultHrService) SetApplicantTimeExtend(ctx context.Context, in *SetApplicantTimeExtendReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.SetApplicantTimeExtend(ctx, in, opts...)
}

func (m *defaultHrService) AddEvaluation(ctx context.Context, in *AddEvaluationReq, opts ...grpc.CallOption) (*AddEvaluationResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.AddEvaluation(ctx, in, opts...)
}

func (m *defaultHrService) DeleteEvaluation(ctx context.Context, in *DeleteEvaluationReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.DeleteEvaluation(ctx, in, opts...)
}

func (m *defaultHrService) UpdateEvaluation(ctx context.Context, in *UpdateEvaluationReq, opts ...grpc.CallOption) (*UpdateEvaluationResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.UpdateEvaluation(ctx, in, opts...)
}

func (m *defaultHrService) GetEvaluationInfo(ctx context.Context, in *GetEvaluationInfoReq, opts ...grpc.CallOption) (*GetEvaluationInfoResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetEvaluationInfo(ctx, in, opts...)
}

func (m *defaultHrService) GetEvaluations(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetEvaluationsResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetEvaluations(ctx, in, opts...)
}

func (m *defaultHrService) CreateQuestion(ctx context.Context, in *CreateQuestionReq, opts ...grpc.CallOption) (*CreateQuestionResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.CreateQuestion(ctx, in, opts...)
}

func (m *defaultHrService) DeleteQuestion(ctx context.Context, in *DeleteQuestionReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.DeleteQuestion(ctx, in, opts...)
}

func (m *defaultHrService) UpdateQuestion(ctx context.Context, in *UpdateQuestionReq, opts ...grpc.CallOption) (*UpdateQuestionResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.UpdateQuestion(ctx, in, opts...)
}

func (m *defaultHrService) GetQuestions(ctx context.Context, in *GetQuestionsReq, opts ...grpc.CallOption) (*GetQuestionsResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetQuestions(ctx, in, opts...)
}

func (m *defaultHrService) GetApplicantQuestions(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetApplicantQuestionsResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetApplicantQuestions(ctx, in, opts...)
}

func (m *defaultHrService) AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.AdminLogin(ctx, in, opts...)
}

func (m *defaultHrService) AdminLogout(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.AdminLogout(ctx, in, opts...)
}

func (m *defaultHrService) GetAdminInfo(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetAdminInfoResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetAdminInfo(ctx, in, opts...)
}

func (m *defaultHrService) SetDefaultStandard(ctx context.Context, in *SetDefaultStandardReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.SetDefaultStandard(ctx, in, opts...)
}

func (m *defaultHrService) GetOAuthConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetOAuthConfigResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetOAuthConfig(ctx, in, opts...)
}

func (m *defaultHrService) GetFrontendConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetFrontendConfigResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetFrontendConfig(ctx, in, opts...)
}

func (m *defaultHrService) AdminLoginByPassword(ctx context.Context, in *AdminLoginByPasswordReq, opts ...grpc.CallOption) (*AdminLoginResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.AdminLoginByPassword(ctx, in, opts...)
}

func (m *defaultHrService) UpdateAdminPassword(ctx context.Context, in *UpdateAdminPasswordReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.UpdateAdminPassword(ctx, in, opts...)
}

func (m *defaultHrService) CreateAdmin(ctx context.Context, in *CreateAdminReq, opts ...grpc.CallOption) (*CreateAdminResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.CreateAdmin(ctx, in, opts...)
}

func (m *defaultHrService) UpdateAdmin(ctx context.Context, in *UpdateAdminReq, opts ...grpc.CallOption) (*UpdateAdminResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.UpdateAdmin(ctx, in, opts...)
}

func (m *defaultHrService) DeleteAdmin(ctx context.Context, in *DeleteAdminReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.DeleteAdmin(ctx, in, opts...)
}

func (m *defaultHrService) GetRank(ctx context.Context, in *GetRankReq, opts ...grpc.CallOption) (*GetRankResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetRank(ctx, in, opts...)
}

func (m *defaultHrService) GetScore(ctx context.Context, in *GetScoreReq, opts ...grpc.CallOption) (*GetScoreResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetScore(ctx, in, opts...)
}

func (m *defaultHrService) PostScore(ctx context.Context, in *PostScoreReq, opts ...grpc.CallOption) (*PostScoreResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.PostScore(ctx, in, opts...)
}

func (m *defaultHrService) DeleteScore(ctx context.Context, in *DeleteScoreReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.DeleteScore(ctx, in, opts...)
}

func (m *defaultHrService) GetRemark(ctx context.Context, in *GetRemarkReq, opts ...grpc.CallOption) (*GetRemarkResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetRemark(ctx, in, opts...)
}

func (m *defaultHrService) PostRemark(ctx context.Context, in *PostRemarkReq, opts ...grpc.CallOption) (*PostRemarkResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.PostRemark(ctx, in, opts...)
}

func (m *defaultHrService) DeleteRemark(ctx context.Context, in *DeleteRemarkReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.DeleteRemark(ctx, in, opts...)
}

func (m *defaultHrService) GetRemarkList(ctx context.Context, in *GetRemarkListReq, opts ...grpc.CallOption) (*GetRemarkListResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetRemarkList(ctx, in, opts...)
}

func (m *defaultHrService) GetStatisticsClassify(ctx context.Context, in *GetStatisticsClassifyReq, opts ...grpc.CallOption) (*GetStatisticsClassifyResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetStatisticsClassify(ctx, in, opts...)
}

func (m *defaultHrService) GetStatisticsDailyNew(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetStatisticsDailyNewResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetStatisticsDailyNew(ctx, in, opts...)
}

func (m *defaultHrService) PostTimeConfig(ctx context.Context, in *PostTimeConfigReq, opts ...grpc.CallOption) (*PostTimeConfigResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.PostTimeConfig(ctx, in, opts...)
}

func (m *defaultHrService) ExportTimes(ctx context.Context, in *ExportTimesReq, opts ...grpc.CallOption) (*ExportTimesResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.ExportTimes(ctx, in, opts...)
}

func (m *defaultHrService) UploadTimes(ctx context.Context, in *UploadTimesReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.UploadTimes(ctx, in, opts...)
}

func (m *defaultHrService) ClearTimes(ctx context.Context, in *ClearTimesReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.ClearTimes(ctx, in, opts...)
}

func (m *defaultHrService) GetTimesStatistics(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetTimesStatisticsResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetTimesStatistics(ctx, in, opts...)
}

func (m *defaultHrService) GetSchedule(ctx context.Context, in *GetScheduleReq, opts ...grpc.CallOption) (*GetScheduleResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetSchedule(ctx, in, opts...)
}

func (m *defaultHrService) GetSmsConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetSmsConfigResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetSmsConfig(ctx, in, opts...)
}

func (m *defaultHrService) GetApplicantSms(ctx context.Context, in *GetApplicantSmsReq, opts ...grpc.CallOption) (*GetApplicantSmsResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetApplicantSms(ctx, in, opts...)
}

func (m *defaultHrService) SendSms(ctx context.Context, in *SendSmsReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.SendSms(ctx, in, opts...)
}

func (m *defaultHrService) GetHistorySms(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetHistorySmsResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetHistorySms(ctx, in, opts...)
}

func (m *defaultHrService) ReceiveSms(ctx context.Context, in *ReceiveSmsReq, opts ...grpc.CallOption) (*ReceiveSmsResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.ReceiveSms(ctx, in, opts...)
}

func (m *defaultHrService) GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetConfig(ctx, in, opts...)
}

func (m *defaultHrService) UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.UpdateConfig(ctx, in, opts...)
}

func (m *defaultHrService) GetSmsServiceConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetSmsServiceConfigResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetSmsServiceConfig(ctx, in, opts...)
}

func (m *defaultHrService) GetAllRoom(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetAllRoomResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetAllRoom(ctx, in, opts...)
}

func (m *defaultHrService) SetMyRoom(ctx context.Context, in *SetMyRoomReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.SetMyRoom(ctx, in, opts...)
}

func (m *defaultHrService) GetPushableList(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetPushableListResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.GetPushableList(ctx, in, opts...)
}

func (m *defaultHrService) PushApplicant(ctx context.Context, in *PushApplicantReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.PushApplicant(ctx, in, opts...)
}

func (m *defaultHrService) SetRoomStatus(ctx context.Context, in *SetRoomStatusReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.SetRoomStatus(ctx, in, opts...)
}

func (m *defaultHrService) SetRoomComment(ctx context.Context, in *SetRoomCommentReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.SetRoomComment(ctx, in, opts...)
}

func (m *defaultHrService) SetRoomGroup(ctx context.Context, in *SetRoomGroupReq, opts ...grpc.CallOption) (*StatusResp, error) {
	client := hr_admin_service.NewHrServiceClient(m.cli.Conn())
	return client.SetRoomGroup(ctx, in, opts...)
}
