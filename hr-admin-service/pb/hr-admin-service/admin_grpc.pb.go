// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: admin.proto

package hr_admin_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HrService_Ping_FullMethodName                   = "/hr_admin_service.HrService/Ping"
	HrService_SetApplicantAdmit_FullMethodName      = "/hr_admin_service.HrService/SetApplicantAdmit"
	HrService_GetApplicants_FullMethodName          = "/hr_admin_service.HrService/GetApplicants"
	HrService_GetApplicantInfo_FullMethodName       = "/hr_admin_service.HrService/GetApplicantInfo"
	HrService_GetApplicantNameList_FullMethodName   = "/hr_admin_service.HrService/GetApplicantNameList"
	HrService_GetApplicantScores_FullMethodName     = "/hr_admin_service.HrService/GetApplicantScores"
	HrService_DeleteApplicant_FullMethodName        = "/hr_admin_service.HrService/DeleteApplicant"
	HrService_SetApplicantTimeExtend_FullMethodName = "/hr_admin_service.HrService/SetApplicantTimeExtend"
	HrService_AddEvaluation_FullMethodName          = "/hr_admin_service.HrService/AddEvaluation"
	HrService_DeleteEvaluation_FullMethodName       = "/hr_admin_service.HrService/DeleteEvaluation"
	HrService_UpdateEvaluation_FullMethodName       = "/hr_admin_service.HrService/UpdateEvaluation"
	HrService_GetEvaluationInfo_FullMethodName      = "/hr_admin_service.HrService/GetEvaluationInfo"
	HrService_GetEvaluations_FullMethodName         = "/hr_admin_service.HrService/GetEvaluations"
	HrService_CreateQuestion_FullMethodName         = "/hr_admin_service.HrService/CreateQuestion"
	HrService_DeleteQuestion_FullMethodName         = "/hr_admin_service.HrService/DeleteQuestion"
	HrService_UpdateQuestion_FullMethodName         = "/hr_admin_service.HrService/UpdateQuestion"
	HrService_GetQuestions_FullMethodName           = "/hr_admin_service.HrService/GetQuestions"
	HrService_GetApplicantQuestions_FullMethodName  = "/hr_admin_service.HrService/GetApplicantQuestions"
	HrService_AdminLogin_FullMethodName             = "/hr_admin_service.HrService/AdminLogin"
	HrService_AdminLogout_FullMethodName            = "/hr_admin_service.HrService/AdminLogout"
	HrService_GetAdminInfo_FullMethodName           = "/hr_admin_service.HrService/GetAdminInfo"
	HrService_SetDefaultStandard_FullMethodName     = "/hr_admin_service.HrService/SetDefaultStandard"
	HrService_GetOAuthConfig_FullMethodName         = "/hr_admin_service.HrService/GetOAuthConfig"
	HrService_GetFrontendConfig_FullMethodName      = "/hr_admin_service.HrService/GetFrontendConfig"
	HrService_GetRank_FullMethodName                = "/hr_admin_service.HrService/GetRank"
	HrService_GetScore_FullMethodName               = "/hr_admin_service.HrService/GetScore"
	HrService_PostScore_FullMethodName              = "/hr_admin_service.HrService/PostScore"
	HrService_DeleteScore_FullMethodName            = "/hr_admin_service.HrService/DeleteScore"
	HrService_GetRemark_FullMethodName              = "/hr_admin_service.HrService/GetRemark"
	HrService_PostRemark_FullMethodName             = "/hr_admin_service.HrService/PostRemark"
	HrService_DeleteRemark_FullMethodName           = "/hr_admin_service.HrService/DeleteRemark"
	HrService_GetRemarkList_FullMethodName          = "/hr_admin_service.HrService/GetRemarkList"
	HrService_GetStatisticsClassify_FullMethodName  = "/hr_admin_service.HrService/GetStatisticsClassify"
	HrService_GetStatisticsDailyNew_FullMethodName  = "/hr_admin_service.HrService/GetStatisticsDailyNew"
	HrService_PostTimeConfig_FullMethodName         = "/hr_admin_service.HrService/PostTimeConfig"
	HrService_ExportTimes_FullMethodName            = "/hr_admin_service.HrService/ExportTimes"
	HrService_UploadTimes_FullMethodName            = "/hr_admin_service.HrService/UploadTimes"
	HrService_ClearTimes_FullMethodName             = "/hr_admin_service.HrService/ClearTimes"
	HrService_GetTimesStatistics_FullMethodName     = "/hr_admin_service.HrService/GetTimesStatistics"
	HrService_GetSchedule_FullMethodName            = "/hr_admin_service.HrService/GetSchedule"
	HrService_GetSmsConfig_FullMethodName           = "/hr_admin_service.HrService/GetSmsConfig"
	HrService_GetApplicantSms_FullMethodName        = "/hr_admin_service.HrService/GetApplicantSms"
	HrService_SendSms_FullMethodName                = "/hr_admin_service.HrService/SendSms"
	HrService_GetHistorySms_FullMethodName          = "/hr_admin_service.HrService/GetHistorySms"
	HrService_ReceiveSms_FullMethodName             = "/hr_admin_service.HrService/ReceiveSms"
	HrService_GetConfig_FullMethodName              = "/hr_admin_service.HrService/GetConfig"
	HrService_UpdateConfig_FullMethodName           = "/hr_admin_service.HrService/UpdateConfig"
	HrService_GetSmsServiceConfig_FullMethodName    = "/hr_admin_service.HrService/GetSmsServiceConfig"
	HrService_GetAllRoom_FullMethodName             = "/hr_admin_service.HrService/GetAllRoom"
	HrService_SetMyRoom_FullMethodName              = "/hr_admin_service.HrService/SetMyRoom"
	HrService_GetPushableList_FullMethodName        = "/hr_admin_service.HrService/GetPushableList"
	HrService_PushApplicant_FullMethodName          = "/hr_admin_service.HrService/PushApplicant"
	HrService_SetRoomStatus_FullMethodName          = "/hr_admin_service.HrService/SetRoomStatus"
	HrService_SetRoomComment_FullMethodName         = "/hr_admin_service.HrService/SetRoomComment"
	HrService_SetRoomGroup_FullMethodName           = "/hr_admin_service.HrService/SetRoomGroup"
)

// HrServiceClient is the client API for HrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HrServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	SetApplicantAdmit(ctx context.Context, in *SetApplicantAdmitReq, opts ...grpc.CallOption) (*StatusResp, error)
	GetApplicants(ctx context.Context, in *GetApplicantsReq, opts ...grpc.CallOption) (*GetApplicantsResp, error)
	GetApplicantInfo(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetApplicantInfoResp, error)
	GetApplicantNameList(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetApplicantNameListResp, error)
	GetApplicantScores(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetApplicantScoresResp, error)
	DeleteApplicant(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*StatusResp, error)
	SetApplicantTimeExtend(ctx context.Context, in *SetApplicantTimeExtendReq, opts ...grpc.CallOption) (*StatusResp, error)
	AddEvaluation(ctx context.Context, in *AddEvaluationReq, opts ...grpc.CallOption) (*AddEvaluationResp, error)
	DeleteEvaluation(ctx context.Context, in *DeleteEvaluationReq, opts ...grpc.CallOption) (*StatusResp, error)
	UpdateEvaluation(ctx context.Context, in *UpdateEvaluationReq, opts ...grpc.CallOption) (*UpdateEvaluationResp, error)
	GetEvaluationInfo(ctx context.Context, in *GetEvaluationInfoReq, opts ...grpc.CallOption) (*GetEvaluationInfoResp, error)
	GetEvaluations(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetEvaluationsResp, error)
	CreateQuestion(ctx context.Context, in *CreateQuestionReq, opts ...grpc.CallOption) (*CreateQuestionResp, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionReq, opts ...grpc.CallOption) (*StatusResp, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionReq, opts ...grpc.CallOption) (*UpdateQuestionResp, error)
	GetQuestions(ctx context.Context, in *GetQuestionsReq, opts ...grpc.CallOption) (*GetQuestionsResp, error)
	GetApplicantQuestions(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetApplicantQuestionsResp, error)
	AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error)
	AdminLogout(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*StatusResp, error)
	GetAdminInfo(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetAdminInfoResp, error)
	SetDefaultStandard(ctx context.Context, in *SetDefaultStandardReq, opts ...grpc.CallOption) (*StatusResp, error)
	GetOAuthConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetOAuthConfigResp, error)
	GetFrontendConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetFrontendConfigResp, error)
	GetRank(ctx context.Context, in *GetRankReq, opts ...grpc.CallOption) (*GetRankResp, error)
	GetScore(ctx context.Context, in *GetScoreReq, opts ...grpc.CallOption) (*GetScoreResp, error)
	PostScore(ctx context.Context, in *PostScoreReq, opts ...grpc.CallOption) (*PostScoreResp, error)
	DeleteScore(ctx context.Context, in *DeleteScoreReq, opts ...grpc.CallOption) (*StatusResp, error)
	GetRemark(ctx context.Context, in *GetRemarkReq, opts ...grpc.CallOption) (*GetRemarkResp, error)
	PostRemark(ctx context.Context, in *PostRemarkReq, opts ...grpc.CallOption) (*PostRemarkResp, error)
	DeleteRemark(ctx context.Context, in *DeleteRemarkReq, opts ...grpc.CallOption) (*StatusResp, error)
	GetRemarkList(ctx context.Context, in *GetRemarkListReq, opts ...grpc.CallOption) (*GetRemarkListResp, error)
	GetStatisticsClassify(ctx context.Context, in *GetStatisticsClassifyReq, opts ...grpc.CallOption) (*GetStatisticsClassifyResp, error)
	GetStatisticsDailyNew(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetStatisticsDailyNewResp, error)
	PostTimeConfig(ctx context.Context, in *PostTimeConfigReq, opts ...grpc.CallOption) (*PostTimeConfigResp, error)
	ExportTimes(ctx context.Context, in *ExportTimesReq, opts ...grpc.CallOption) (*ExportTimesResp, error)
	UploadTimes(ctx context.Context, in *UploadTimesReq, opts ...grpc.CallOption) (*StatusResp, error)
	ClearTimes(ctx context.Context, in *ClearTimesReq, opts ...grpc.CallOption) (*StatusResp, error)
	GetTimesStatistics(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetTimesStatisticsResp, error)
	GetSchedule(ctx context.Context, in *GetScheduleReq, opts ...grpc.CallOption) (*GetScheduleResp, error)
	GetSmsConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetSmsConfigResp, error)
	GetApplicantSms(ctx context.Context, in *GetApplicantSmsReq, opts ...grpc.CallOption) (*GetApplicantSmsResp, error)
	SendSms(ctx context.Context, in *SendSmsReq, opts ...grpc.CallOption) (*StatusResp, error)
	GetHistorySms(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetHistorySmsResp, error)
	ReceiveSms(ctx context.Context, in *ReceiveSmsReq, opts ...grpc.CallOption) (*ReceiveSmsResp, error)
	GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error)
	GetSmsServiceConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetSmsServiceConfigResp, error)
	GetAllRoom(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetAllRoomResp, error)
	SetMyRoom(ctx context.Context, in *SetMyRoomReq, opts ...grpc.CallOption) (*StatusResp, error)
	GetPushableList(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetPushableListResp, error)
	PushApplicant(ctx context.Context, in *PushApplicantReq, opts ...grpc.CallOption) (*StatusResp, error)
	SetRoomStatus(ctx context.Context, in *SetRoomStatusReq, opts ...grpc.CallOption) (*StatusResp, error)
	SetRoomComment(ctx context.Context, in *SetRoomCommentReq, opts ...grpc.CallOption) (*StatusResp, error)
	SetRoomGroup(ctx context.Context, in *SetRoomGroupReq, opts ...grpc.CallOption) (*StatusResp, error)
}

type hrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHrServiceClient(cc grpc.ClientConnInterface) HrServiceClient {
	return &hrServiceClient{cc}
}

func (c *hrServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, HrService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) SetApplicantAdmit(ctx context.Context, in *SetApplicantAdmitReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_SetApplicantAdmit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetApplicants(ctx context.Context, in *GetApplicantsReq, opts ...grpc.CallOption) (*GetApplicantsResp, error) {
	out := new(GetApplicantsResp)
	err := c.cc.Invoke(ctx, HrService_GetApplicants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetApplicantInfo(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetApplicantInfoResp, error) {
	out := new(GetApplicantInfoResp)
	err := c.cc.Invoke(ctx, HrService_GetApplicantInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetApplicantNameList(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetApplicantNameListResp, error) {
	out := new(GetApplicantNameListResp)
	err := c.cc.Invoke(ctx, HrService_GetApplicantNameList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetApplicantScores(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetApplicantScoresResp, error) {
	out := new(GetApplicantScoresResp)
	err := c.cc.Invoke(ctx, HrService_GetApplicantScores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) DeleteApplicant(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_DeleteApplicant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) SetApplicantTimeExtend(ctx context.Context, in *SetApplicantTimeExtendReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_SetApplicantTimeExtend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) AddEvaluation(ctx context.Context, in *AddEvaluationReq, opts ...grpc.CallOption) (*AddEvaluationResp, error) {
	out := new(AddEvaluationResp)
	err := c.cc.Invoke(ctx, HrService_AddEvaluation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) DeleteEvaluation(ctx context.Context, in *DeleteEvaluationReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_DeleteEvaluation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) UpdateEvaluation(ctx context.Context, in *UpdateEvaluationReq, opts ...grpc.CallOption) (*UpdateEvaluationResp, error) {
	out := new(UpdateEvaluationResp)
	err := c.cc.Invoke(ctx, HrService_UpdateEvaluation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetEvaluationInfo(ctx context.Context, in *GetEvaluationInfoReq, opts ...grpc.CallOption) (*GetEvaluationInfoResp, error) {
	out := new(GetEvaluationInfoResp)
	err := c.cc.Invoke(ctx, HrService_GetEvaluationInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetEvaluations(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetEvaluationsResp, error) {
	out := new(GetEvaluationsResp)
	err := c.cc.Invoke(ctx, HrService_GetEvaluations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionReq, opts ...grpc.CallOption) (*CreateQuestionResp, error) {
	out := new(CreateQuestionResp)
	err := c.cc.Invoke(ctx, HrService_CreateQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_DeleteQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionReq, opts ...grpc.CallOption) (*UpdateQuestionResp, error) {
	out := new(UpdateQuestionResp)
	err := c.cc.Invoke(ctx, HrService_UpdateQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetQuestions(ctx context.Context, in *GetQuestionsReq, opts ...grpc.CallOption) (*GetQuestionsResp, error) {
	out := new(GetQuestionsResp)
	err := c.cc.Invoke(ctx, HrService_GetQuestions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetApplicantQuestions(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetApplicantQuestionsResp, error) {
	out := new(GetApplicantQuestionsResp)
	err := c.cc.Invoke(ctx, HrService_GetApplicantQuestions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) AdminLogin(ctx context.Context, in *AdminLoginReq, opts ...grpc.CallOption) (*AdminLoginResp, error) {
	out := new(AdminLoginResp)
	err := c.cc.Invoke(ctx, HrService_AdminLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) AdminLogout(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_AdminLogout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetAdminInfo(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetAdminInfoResp, error) {
	out := new(GetAdminInfoResp)
	err := c.cc.Invoke(ctx, HrService_GetAdminInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) SetDefaultStandard(ctx context.Context, in *SetDefaultStandardReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_SetDefaultStandard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetOAuthConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetOAuthConfigResp, error) {
	out := new(GetOAuthConfigResp)
	err := c.cc.Invoke(ctx, HrService_GetOAuthConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetFrontendConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetFrontendConfigResp, error) {
	out := new(GetFrontendConfigResp)
	err := c.cc.Invoke(ctx, HrService_GetFrontendConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetRank(ctx context.Context, in *GetRankReq, opts ...grpc.CallOption) (*GetRankResp, error) {
	out := new(GetRankResp)
	err := c.cc.Invoke(ctx, HrService_GetRank_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetScore(ctx context.Context, in *GetScoreReq, opts ...grpc.CallOption) (*GetScoreResp, error) {
	out := new(GetScoreResp)
	err := c.cc.Invoke(ctx, HrService_GetScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) PostScore(ctx context.Context, in *PostScoreReq, opts ...grpc.CallOption) (*PostScoreResp, error) {
	out := new(PostScoreResp)
	err := c.cc.Invoke(ctx, HrService_PostScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) DeleteScore(ctx context.Context, in *DeleteScoreReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_DeleteScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetRemark(ctx context.Context, in *GetRemarkReq, opts ...grpc.CallOption) (*GetRemarkResp, error) {
	out := new(GetRemarkResp)
	err := c.cc.Invoke(ctx, HrService_GetRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) PostRemark(ctx context.Context, in *PostRemarkReq, opts ...grpc.CallOption) (*PostRemarkResp, error) {
	out := new(PostRemarkResp)
	err := c.cc.Invoke(ctx, HrService_PostRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) DeleteRemark(ctx context.Context, in *DeleteRemarkReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_DeleteRemark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetRemarkList(ctx context.Context, in *GetRemarkListReq, opts ...grpc.CallOption) (*GetRemarkListResp, error) {
	out := new(GetRemarkListResp)
	err := c.cc.Invoke(ctx, HrService_GetRemarkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetStatisticsClassify(ctx context.Context, in *GetStatisticsClassifyReq, opts ...grpc.CallOption) (*GetStatisticsClassifyResp, error) {
	out := new(GetStatisticsClassifyResp)
	err := c.cc.Invoke(ctx, HrService_GetStatisticsClassify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetStatisticsDailyNew(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetStatisticsDailyNewResp, error) {
	out := new(GetStatisticsDailyNewResp)
	err := c.cc.Invoke(ctx, HrService_GetStatisticsDailyNew_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) PostTimeConfig(ctx context.Context, in *PostTimeConfigReq, opts ...grpc.CallOption) (*PostTimeConfigResp, error) {
	out := new(PostTimeConfigResp)
	err := c.cc.Invoke(ctx, HrService_PostTimeConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) ExportTimes(ctx context.Context, in *ExportTimesReq, opts ...grpc.CallOption) (*ExportTimesResp, error) {
	out := new(ExportTimesResp)
	err := c.cc.Invoke(ctx, HrService_ExportTimes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) UploadTimes(ctx context.Context, in *UploadTimesReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_UploadTimes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) ClearTimes(ctx context.Context, in *ClearTimesReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_ClearTimes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetTimesStatistics(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetTimesStatisticsResp, error) {
	out := new(GetTimesStatisticsResp)
	err := c.cc.Invoke(ctx, HrService_GetTimesStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetSchedule(ctx context.Context, in *GetScheduleReq, opts ...grpc.CallOption) (*GetScheduleResp, error) {
	out := new(GetScheduleResp)
	err := c.cc.Invoke(ctx, HrService_GetSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetSmsConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetSmsConfigResp, error) {
	out := new(GetSmsConfigResp)
	err := c.cc.Invoke(ctx, HrService_GetSmsConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetApplicantSms(ctx context.Context, in *GetApplicantSmsReq, opts ...grpc.CallOption) (*GetApplicantSmsResp, error) {
	out := new(GetApplicantSmsResp)
	err := c.cc.Invoke(ctx, HrService_GetApplicantSms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) SendSms(ctx context.Context, in *SendSmsReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_SendSms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetHistorySms(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetHistorySmsResp, error) {
	out := new(GetHistorySmsResp)
	err := c.cc.Invoke(ctx, HrService_GetHistorySms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) ReceiveSms(ctx context.Context, in *ReceiveSmsReq, opts ...grpc.CallOption) (*ReceiveSmsResp, error) {
	out := new(ReceiveSmsResp)
	err := c.cc.Invoke(ctx, HrService_ReceiveSms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error) {
	out := new(GetConfigResp)
	err := c.cc.Invoke(ctx, HrService_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error) {
	out := new(UpdateConfigResp)
	err := c.cc.Invoke(ctx, HrService_UpdateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetSmsServiceConfig(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetSmsServiceConfigResp, error) {
	out := new(GetSmsServiceConfigResp)
	err := c.cc.Invoke(ctx, HrService_GetSmsServiceConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetAllRoom(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetAllRoomResp, error) {
	out := new(GetAllRoomResp)
	err := c.cc.Invoke(ctx, HrService_GetAllRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) SetMyRoom(ctx context.Context, in *SetMyRoomReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_SetMyRoom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetPushableList(ctx context.Context, in *AdminIdReq, opts ...grpc.CallOption) (*GetPushableListResp, error) {
	out := new(GetPushableListResp)
	err := c.cc.Invoke(ctx, HrService_GetPushableList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) PushApplicant(ctx context.Context, in *PushApplicantReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_PushApplicant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) SetRoomStatus(ctx context.Context, in *SetRoomStatusReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_SetRoomStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) SetRoomComment(ctx context.Context, in *SetRoomCommentReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_SetRoomComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) SetRoomGroup(ctx context.Context, in *SetRoomGroupReq, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, HrService_SetRoomGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HrServiceServer is the server API for HrService service.
// All implementations must embed UnimplementedHrServiceServer
// for forward compatibility
type HrServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	SetApplicantAdmit(context.Context, *SetApplicantAdmitReq) (*StatusResp, error)
	GetApplicants(context.Context, *GetApplicantsReq) (*GetApplicantsResp, error)
	GetApplicantInfo(context.Context, *ApplicantIdReq) (*GetApplicantInfoResp, error)
	GetApplicantNameList(context.Context, *AdminIdReq) (*GetApplicantNameListResp, error)
	GetApplicantScores(context.Context, *ApplicantIdReq) (*GetApplicantScoresResp, error)
	DeleteApplicant(context.Context, *ApplicantIdReq) (*StatusResp, error)
	SetApplicantTimeExtend(context.Context, *SetApplicantTimeExtendReq) (*StatusResp, error)
	AddEvaluation(context.Context, *AddEvaluationReq) (*AddEvaluationResp, error)
	DeleteEvaluation(context.Context, *DeleteEvaluationReq) (*StatusResp, error)
	UpdateEvaluation(context.Context, *UpdateEvaluationReq) (*UpdateEvaluationResp, error)
	GetEvaluationInfo(context.Context, *GetEvaluationInfoReq) (*GetEvaluationInfoResp, error)
	GetEvaluations(context.Context, *AdminIdReq) (*GetEvaluationsResp, error)
	CreateQuestion(context.Context, *CreateQuestionReq) (*CreateQuestionResp, error)
	DeleteQuestion(context.Context, *DeleteQuestionReq) (*StatusResp, error)
	UpdateQuestion(context.Context, *UpdateQuestionReq) (*UpdateQuestionResp, error)
	GetQuestions(context.Context, *GetQuestionsReq) (*GetQuestionsResp, error)
	GetApplicantQuestions(context.Context, *ApplicantIdReq) (*GetApplicantQuestionsResp, error)
	AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error)
	AdminLogout(context.Context, *AdminIdReq) (*StatusResp, error)
	GetAdminInfo(context.Context, *AdminIdReq) (*GetAdminInfoResp, error)
	SetDefaultStandard(context.Context, *SetDefaultStandardReq) (*StatusResp, error)
	GetOAuthConfig(context.Context, *AdminIdReq) (*GetOAuthConfigResp, error)
	GetFrontendConfig(context.Context, *AdminIdReq) (*GetFrontendConfigResp, error)
	GetRank(context.Context, *GetRankReq) (*GetRankResp, error)
	GetScore(context.Context, *GetScoreReq) (*GetScoreResp, error)
	PostScore(context.Context, *PostScoreReq) (*PostScoreResp, error)
	DeleteScore(context.Context, *DeleteScoreReq) (*StatusResp, error)
	GetRemark(context.Context, *GetRemarkReq) (*GetRemarkResp, error)
	PostRemark(context.Context, *PostRemarkReq) (*PostRemarkResp, error)
	DeleteRemark(context.Context, *DeleteRemarkReq) (*StatusResp, error)
	GetRemarkList(context.Context, *GetRemarkListReq) (*GetRemarkListResp, error)
	GetStatisticsClassify(context.Context, *GetStatisticsClassifyReq) (*GetStatisticsClassifyResp, error)
	GetStatisticsDailyNew(context.Context, *AdminIdReq) (*GetStatisticsDailyNewResp, error)
	PostTimeConfig(context.Context, *PostTimeConfigReq) (*PostTimeConfigResp, error)
	ExportTimes(context.Context, *ExportTimesReq) (*ExportTimesResp, error)
	UploadTimes(context.Context, *UploadTimesReq) (*StatusResp, error)
	ClearTimes(context.Context, *ClearTimesReq) (*StatusResp, error)
	GetTimesStatistics(context.Context, *AdminIdReq) (*GetTimesStatisticsResp, error)
	GetSchedule(context.Context, *GetScheduleReq) (*GetScheduleResp, error)
	GetSmsConfig(context.Context, *AdminIdReq) (*GetSmsConfigResp, error)
	GetApplicantSms(context.Context, *GetApplicantSmsReq) (*GetApplicantSmsResp, error)
	SendSms(context.Context, *SendSmsReq) (*StatusResp, error)
	GetHistorySms(context.Context, *ApplicantIdReq) (*GetHistorySmsResp, error)
	ReceiveSms(context.Context, *ReceiveSmsReq) (*ReceiveSmsResp, error)
	GetConfig(context.Context, *GetConfigReq) (*GetConfigResp, error)
	UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error)
	GetSmsServiceConfig(context.Context, *AdminIdReq) (*GetSmsServiceConfigResp, error)
	GetAllRoom(context.Context, *AdminIdReq) (*GetAllRoomResp, error)
	SetMyRoom(context.Context, *SetMyRoomReq) (*StatusResp, error)
	GetPushableList(context.Context, *AdminIdReq) (*GetPushableListResp, error)
	PushApplicant(context.Context, *PushApplicantReq) (*StatusResp, error)
	SetRoomStatus(context.Context, *SetRoomStatusReq) (*StatusResp, error)
	SetRoomComment(context.Context, *SetRoomCommentReq) (*StatusResp, error)
	SetRoomGroup(context.Context, *SetRoomGroupReq) (*StatusResp, error)
	mustEmbedUnimplementedHrServiceServer()
}

// UnimplementedHrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHrServiceServer struct {
}

func (UnimplementedHrServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHrServiceServer) SetApplicantAdmit(context.Context, *SetApplicantAdmitReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApplicantAdmit not implemented")
}
func (UnimplementedHrServiceServer) GetApplicants(context.Context, *GetApplicantsReq) (*GetApplicantsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicants not implemented")
}
func (UnimplementedHrServiceServer) GetApplicantInfo(context.Context, *ApplicantIdReq) (*GetApplicantInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicantInfo not implemented")
}
func (UnimplementedHrServiceServer) GetApplicantNameList(context.Context, *AdminIdReq) (*GetApplicantNameListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicantNameList not implemented")
}
func (UnimplementedHrServiceServer) GetApplicantScores(context.Context, *ApplicantIdReq) (*GetApplicantScoresResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicantScores not implemented")
}
func (UnimplementedHrServiceServer) DeleteApplicant(context.Context, *ApplicantIdReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplicant not implemented")
}
func (UnimplementedHrServiceServer) SetApplicantTimeExtend(context.Context, *SetApplicantTimeExtendReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApplicantTimeExtend not implemented")
}
func (UnimplementedHrServiceServer) AddEvaluation(context.Context, *AddEvaluationReq) (*AddEvaluationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEvaluation not implemented")
}
func (UnimplementedHrServiceServer) DeleteEvaluation(context.Context, *DeleteEvaluationReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvaluation not implemented")
}
func (UnimplementedHrServiceServer) UpdateEvaluation(context.Context, *UpdateEvaluationReq) (*UpdateEvaluationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvaluation not implemented")
}
func (UnimplementedHrServiceServer) GetEvaluationInfo(context.Context, *GetEvaluationInfoReq) (*GetEvaluationInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluationInfo not implemented")
}
func (UnimplementedHrServiceServer) GetEvaluations(context.Context, *AdminIdReq) (*GetEvaluationsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvaluations not implemented")
}
func (UnimplementedHrServiceServer) CreateQuestion(context.Context, *CreateQuestionReq) (*CreateQuestionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedHrServiceServer) DeleteQuestion(context.Context, *DeleteQuestionReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedHrServiceServer) UpdateQuestion(context.Context, *UpdateQuestionReq) (*UpdateQuestionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedHrServiceServer) GetQuestions(context.Context, *GetQuestionsReq) (*GetQuestionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (UnimplementedHrServiceServer) GetApplicantQuestions(context.Context, *ApplicantIdReq) (*GetApplicantQuestionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicantQuestions not implemented")
}
func (UnimplementedHrServiceServer) AdminLogin(context.Context, *AdminLoginReq) (*AdminLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedHrServiceServer) AdminLogout(context.Context, *AdminIdReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogout not implemented")
}
func (UnimplementedHrServiceServer) GetAdminInfo(context.Context, *AdminIdReq) (*GetAdminInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminInfo not implemented")
}
func (UnimplementedHrServiceServer) SetDefaultStandard(context.Context, *SetDefaultStandardReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultStandard not implemented")
}
func (UnimplementedHrServiceServer) GetOAuthConfig(context.Context, *AdminIdReq) (*GetOAuthConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuthConfig not implemented")
}
func (UnimplementedHrServiceServer) GetFrontendConfig(context.Context, *AdminIdReq) (*GetFrontendConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontendConfig not implemented")
}
func (UnimplementedHrServiceServer) GetRank(context.Context, *GetRankReq) (*GetRankResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRank not implemented")
}
func (UnimplementedHrServiceServer) GetScore(context.Context, *GetScoreReq) (*GetScoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScore not implemented")
}
func (UnimplementedHrServiceServer) PostScore(context.Context, *PostScoreReq) (*PostScoreResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostScore not implemented")
}
func (UnimplementedHrServiceServer) DeleteScore(context.Context, *DeleteScoreReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScore not implemented")
}
func (UnimplementedHrServiceServer) GetRemark(context.Context, *GetRemarkReq) (*GetRemarkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemark not implemented")
}
func (UnimplementedHrServiceServer) PostRemark(context.Context, *PostRemarkReq) (*PostRemarkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRemark not implemented")
}
func (UnimplementedHrServiceServer) DeleteRemark(context.Context, *DeleteRemarkReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemark not implemented")
}
func (UnimplementedHrServiceServer) GetRemarkList(context.Context, *GetRemarkListReq) (*GetRemarkListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemarkList not implemented")
}
func (UnimplementedHrServiceServer) GetStatisticsClassify(context.Context, *GetStatisticsClassifyReq) (*GetStatisticsClassifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsClassify not implemented")
}
func (UnimplementedHrServiceServer) GetStatisticsDailyNew(context.Context, *AdminIdReq) (*GetStatisticsDailyNewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatisticsDailyNew not implemented")
}
func (UnimplementedHrServiceServer) PostTimeConfig(context.Context, *PostTimeConfigReq) (*PostTimeConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTimeConfig not implemented")
}
func (UnimplementedHrServiceServer) ExportTimes(context.Context, *ExportTimesReq) (*ExportTimesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportTimes not implemented")
}
func (UnimplementedHrServiceServer) UploadTimes(context.Context, *UploadTimesReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadTimes not implemented")
}
func (UnimplementedHrServiceServer) ClearTimes(context.Context, *ClearTimesReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearTimes not implemented")
}
func (UnimplementedHrServiceServer) GetTimesStatistics(context.Context, *AdminIdReq) (*GetTimesStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimesStatistics not implemented")
}
func (UnimplementedHrServiceServer) GetSchedule(context.Context, *GetScheduleReq) (*GetScheduleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedHrServiceServer) GetSmsConfig(context.Context, *AdminIdReq) (*GetSmsConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsConfig not implemented")
}
func (UnimplementedHrServiceServer) GetApplicantSms(context.Context, *GetApplicantSmsReq) (*GetApplicantSmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicantSms not implemented")
}
func (UnimplementedHrServiceServer) SendSms(context.Context, *SendSmsReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedHrServiceServer) GetHistorySms(context.Context, *ApplicantIdReq) (*GetHistorySmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistorySms not implemented")
}
func (UnimplementedHrServiceServer) ReceiveSms(context.Context, *ReceiveSmsReq) (*ReceiveSmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveSms not implemented")
}
func (UnimplementedHrServiceServer) GetConfig(context.Context, *GetConfigReq) (*GetConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedHrServiceServer) UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedHrServiceServer) GetSmsServiceConfig(context.Context, *AdminIdReq) (*GetSmsServiceConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSmsServiceConfig not implemented")
}
func (UnimplementedHrServiceServer) GetAllRoom(context.Context, *AdminIdReq) (*GetAllRoomResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoom not implemented")
}
func (UnimplementedHrServiceServer) SetMyRoom(context.Context, *SetMyRoomReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyRoom not implemented")
}
func (UnimplementedHrServiceServer) GetPushableList(context.Context, *AdminIdReq) (*GetPushableListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPushableList not implemented")
}
func (UnimplementedHrServiceServer) PushApplicant(context.Context, *PushApplicantReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushApplicant not implemented")
}
func (UnimplementedHrServiceServer) SetRoomStatus(context.Context, *SetRoomStatusReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoomStatus not implemented")
}
func (UnimplementedHrServiceServer) SetRoomComment(context.Context, *SetRoomCommentReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoomComment not implemented")
}
func (UnimplementedHrServiceServer) SetRoomGroup(context.Context, *SetRoomGroupReq) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoomGroup not implemented")
}
func (UnimplementedHrServiceServer) mustEmbedUnimplementedHrServiceServer() {}

// UnsafeHrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HrServiceServer will
// result in compilation errors.
type UnsafeHrServiceServer interface {
	mustEmbedUnimplementedHrServiceServer()
}

func RegisterHrServiceServer(s grpc.ServiceRegistrar, srv HrServiceServer) {
	s.RegisterService(&HrService_ServiceDesc, srv)
}

func _HrService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_SetApplicantAdmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicantAdmitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).SetApplicantAdmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_SetApplicantAdmit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).SetApplicantAdmit(ctx, req.(*SetApplicantAdmitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetApplicants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicantsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetApplicants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetApplicants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetApplicants(ctx, req.(*GetApplicantsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetApplicantInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetApplicantInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetApplicantInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetApplicantInfo(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetApplicantNameList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetApplicantNameList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetApplicantNameList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetApplicantNameList(ctx, req.(*AdminIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetApplicantScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetApplicantScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetApplicantScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetApplicantScores(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_DeleteApplicant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).DeleteApplicant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_DeleteApplicant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).DeleteApplicant(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_SetApplicantTimeExtend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicantTimeExtendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).SetApplicantTimeExtend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_SetApplicantTimeExtend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).SetApplicantTimeExtend(ctx, req.(*SetApplicantTimeExtendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_AddEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEvaluationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).AddEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_AddEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).AddEvaluation(ctx, req.(*AddEvaluationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_DeleteEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEvaluationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).DeleteEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_DeleteEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).DeleteEvaluation(ctx, req.(*DeleteEvaluationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_UpdateEvaluation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEvaluationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).UpdateEvaluation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_UpdateEvaluation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).UpdateEvaluation(ctx, req.(*UpdateEvaluationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetEvaluationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEvaluationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetEvaluationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetEvaluationInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetEvaluationInfo(ctx, req.(*GetEvaluationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetEvaluations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetEvaluations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetEvaluations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetEvaluations(ctx, req.(*AdminIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).CreateQuestion(ctx, req.(*CreateQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).DeleteQuestion(ctx, req.(*DeleteQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_UpdateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).UpdateQuestion(ctx, req.(*UpdateQuestionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetQuestions(ctx, req.(*GetQuestionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetApplicantQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetApplicantQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetApplicantQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetApplicantQuestions(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).AdminLogin(ctx, req.(*AdminLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_AdminLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).AdminLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_AdminLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).AdminLogout(ctx, req.(*AdminIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetAdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetAdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetAdminInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetAdminInfo(ctx, req.(*AdminIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_SetDefaultStandard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultStandardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).SetDefaultStandard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_SetDefaultStandard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).SetDefaultStandard(ctx, req.(*SetDefaultStandardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetOAuthConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetOAuthConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetOAuthConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetOAuthConfig(ctx, req.(*AdminIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetFrontendConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetFrontendConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetFrontendConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetFrontendConfig(ctx, req.(*AdminIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetRank(ctx, req.(*GetRankReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetScore(ctx, req.(*GetScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_PostScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).PostScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_PostScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).PostScore(ctx, req.(*PostScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_DeleteScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).DeleteScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_DeleteScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).DeleteScore(ctx, req.(*DeleteScoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetRemark(ctx, req.(*GetRemarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_PostRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRemarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).PostRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_PostRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).PostRemark(ctx, req.(*PostRemarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_DeleteRemark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRemarkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).DeleteRemark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_DeleteRemark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).DeleteRemark(ctx, req.(*DeleteRemarkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetRemarkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRemarkListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetRemarkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetRemarkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetRemarkList(ctx, req.(*GetRemarkListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetStatisticsClassify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsClassifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetStatisticsClassify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetStatisticsClassify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetStatisticsClassify(ctx, req.(*GetStatisticsClassifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetStatisticsDailyNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetStatisticsDailyNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetStatisticsDailyNew_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetStatisticsDailyNew(ctx, req.(*AdminIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_PostTimeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTimeConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).PostTimeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_PostTimeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).PostTimeConfig(ctx, req.(*PostTimeConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_ExportTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportTimesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).ExportTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_ExportTimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).ExportTimes(ctx, req.(*ExportTimesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_UploadTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadTimesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).UploadTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_UploadTimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).UploadTimes(ctx, req.(*UploadTimesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_ClearTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearTimesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).ClearTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_ClearTimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).ClearTimes(ctx, req.(*ClearTimesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetTimesStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetTimesStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetTimesStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetTimesStatistics(ctx, req.(*AdminIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetSchedule(ctx, req.(*GetScheduleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetSmsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetSmsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetSmsConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetSmsConfig(ctx, req.(*AdminIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetApplicantSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicantSmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetApplicantSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetApplicantSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetApplicantSms(ctx, req.(*GetApplicantSmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).SendSms(ctx, req.(*SendSmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetHistorySms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetHistorySms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetHistorySms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetHistorySms(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_ReceiveSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveSmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).ReceiveSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_ReceiveSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).ReceiveSms(ctx, req.(*ReceiveSmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetConfig(ctx, req.(*GetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).UpdateConfig(ctx, req.(*UpdateConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetSmsServiceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetSmsServiceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetSmsServiceConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetSmsServiceConfig(ctx, req.(*AdminIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetAllRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetAllRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetAllRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetAllRoom(ctx, req.(*AdminIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_SetMyRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).SetMyRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_SetMyRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).SetMyRoom(ctx, req.(*SetMyRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetPushableList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetPushableList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetPushableList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetPushableList(ctx, req.(*AdminIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_PushApplicant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushApplicantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).PushApplicant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_PushApplicant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).PushApplicant(ctx, req.(*PushApplicantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_SetRoomStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoomStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).SetRoomStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_SetRoomStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).SetRoomStatus(ctx, req.(*SetRoomStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_SetRoomComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoomCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).SetRoomComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_SetRoomComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).SetRoomComment(ctx, req.(*SetRoomCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_SetRoomGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoomGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).SetRoomGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_SetRoomGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).SetRoomGroup(ctx, req.(*SetRoomGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HrService_ServiceDesc is the grpc.ServiceDesc for HrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hr_admin_service.HrService",
	HandlerType: (*HrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _HrService_Ping_Handler,
		},
		{
			MethodName: "SetApplicantAdmit",
			Handler:    _HrService_SetApplicantAdmit_Handler,
		},
		{
			MethodName: "GetApplicants",
			Handler:    _HrService_GetApplicants_Handler,
		},
		{
			MethodName: "GetApplicantInfo",
			Handler:    _HrService_GetApplicantInfo_Handler,
		},
		{
			MethodName: "GetApplicantNameList",
			Handler:    _HrService_GetApplicantNameList_Handler,
		},
		{
			MethodName: "GetApplicantScores",
			Handler:    _HrService_GetApplicantScores_Handler,
		},
		{
			MethodName: "DeleteApplicant",
			Handler:    _HrService_DeleteApplicant_Handler,
		},
		{
			MethodName: "SetApplicantTimeExtend",
			Handler:    _HrService_SetApplicantTimeExtend_Handler,
		},
		{
			MethodName: "AddEvaluation",
			Handler:    _HrService_AddEvaluation_Handler,
		},
		{
			MethodName: "DeleteEvaluation",
			Handler:    _HrService_DeleteEvaluation_Handler,
		},
		{
			MethodName: "UpdateEvaluation",
			Handler:    _HrService_UpdateEvaluation_Handler,
		},
		{
			MethodName: "GetEvaluationInfo",
			Handler:    _HrService_GetEvaluationInfo_Handler,
		},
		{
			MethodName: "GetEvaluations",
			Handler:    _HrService_GetEvaluations_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _HrService_CreateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _HrService_DeleteQuestion_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _HrService_UpdateQuestion_Handler,
		},
		{
			MethodName: "GetQuestions",
			Handler:    _HrService_GetQuestions_Handler,
		},
		{
			MethodName: "GetApplicantQuestions",
			Handler:    _HrService_GetApplicantQuestions_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _HrService_AdminLogin_Handler,
		},
		{
			MethodName: "AdminLogout",
			Handler:    _HrService_AdminLogout_Handler,
		},
		{
			MethodName: "GetAdminInfo",
			Handler:    _HrService_GetAdminInfo_Handler,
		},
		{
			MethodName: "SetDefaultStandard",
			Handler:    _HrService_SetDefaultStandard_Handler,
		},
		{
			MethodName: "GetOAuthConfig",
			Handler:    _HrService_GetOAuthConfig_Handler,
		},
		{
			MethodName: "GetFrontendConfig",
			Handler:    _HrService_GetFrontendConfig_Handler,
		},
		{
			MethodName: "GetRank",
			Handler:    _HrService_GetRank_Handler,
		},
		{
			MethodName: "GetScore",
			Handler:    _HrService_GetScore_Handler,
		},
		{
			MethodName: "PostScore",
			Handler:    _HrService_PostScore_Handler,
		},
		{
			MethodName: "DeleteScore",
			Handler:    _HrService_DeleteScore_Handler,
		},
		{
			MethodName: "GetRemark",
			Handler:    _HrService_GetRemark_Handler,
		},
		{
			MethodName: "PostRemark",
			Handler:    _HrService_PostRemark_Handler,
		},
		{
			MethodName: "DeleteRemark",
			Handler:    _HrService_DeleteRemark_Handler,
		},
		{
			MethodName: "GetRemarkList",
			Handler:    _HrService_GetRemarkList_Handler,
		},
		{
			MethodName: "GetStatisticsClassify",
			Handler:    _HrService_GetStatisticsClassify_Handler,
		},
		{
			MethodName: "GetStatisticsDailyNew",
			Handler:    _HrService_GetStatisticsDailyNew_Handler,
		},
		{
			MethodName: "PostTimeConfig",
			Handler:    _HrService_PostTimeConfig_Handler,
		},
		{
			MethodName: "ExportTimes",
			Handler:    _HrService_ExportTimes_Handler,
		},
		{
			MethodName: "UploadTimes",
			Handler:    _HrService_UploadTimes_Handler,
		},
		{
			MethodName: "ClearTimes",
			Handler:    _HrService_ClearTimes_Handler,
		},
		{
			MethodName: "GetTimesStatistics",
			Handler:    _HrService_GetTimesStatistics_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _HrService_GetSchedule_Handler,
		},
		{
			MethodName: "GetSmsConfig",
			Handler:    _HrService_GetSmsConfig_Handler,
		},
		{
			MethodName: "GetApplicantSms",
			Handler:    _HrService_GetApplicantSms_Handler,
		},
		{
			MethodName: "SendSms",
			Handler:    _HrService_SendSms_Handler,
		},
		{
			MethodName: "GetHistorySms",
			Handler:    _HrService_GetHistorySms_Handler,
		},
		{
			MethodName: "ReceiveSms",
			Handler:    _HrService_ReceiveSms_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _HrService_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _HrService_UpdateConfig_Handler,
		},
		{
			MethodName: "GetSmsServiceConfig",
			Handler:    _HrService_GetSmsServiceConfig_Handler,
		},
		{
			MethodName: "GetAllRoom",
			Handler:    _HrService_GetAllRoom_Handler,
		},
		{
			MethodName: "SetMyRoom",
			Handler:    _HrService_SetMyRoom_Handler,
		},
		{
			MethodName: "GetPushableList",
			Handler:    _HrService_GetPushableList_Handler,
		},
		{
			MethodName: "PushApplicant",
			Handler:    _HrService_PushApplicant_Handler,
		},
		{
			MethodName: "SetRoomStatus",
			Handler:    _HrService_SetRoomStatus_Handler,
		},
		{
			MethodName: "SetRoomComment",
			Handler:    _HrService_SetRoomComment_Handler,
		},
		{
			MethodName: "SetRoomGroup",
			Handler:    _HrService_SetRoomGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
