// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	announce "HR_Go/hr-api/internal/handler/announce"
	exam "HR_Go/hr-api/internal/handler/exam"
	form "HR_Go/hr-api/internal/handler/form"
	joinus "HR_Go/hr-api/internal/handler/joinus"
	timeconfig "HR_Go/hr-api/internal/handler/timeconfig"
	"HR_Go/hr-api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/ping",
				Handler: PingHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/:status",
				Handler: announce.GetAnnounceStatusHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/announce"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: exam.GetExamHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/",
				Handler: exam.SetExamHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/guide",
				Handler: exam.GetGuideHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/exam"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/intent",
				Handler: form.GetFormIntentHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/groups",
				Handler: form.GetFormGroupsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/get",
				Handler: form.GetFormHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/form"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login/:token",
				Handler: joinus.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/can-apply",
				Handler: joinus.GetCanApplyHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/can-select",
				Handler: joinus.GetCanSelectHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/joinus"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/apply",
				Handler: joinus.PostApplyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/time",
				Handler: joinus.SelectTimeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/step",
				Handler: joinus.GetStepHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/wechat",
				Handler: joinus.GetWechatHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/form",
				Handler: joinus.GetFormHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/intents",
				Handler: joinus.GetIntentsHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/time",
				Handler: joinus.GetTimeHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/result",
				Handler: joinus.GetResultHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/review",
				Handler: joinus.GetReviewHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/joinus"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/",
				Handler: timeconfig.GetTimeConfigHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/time-config"),
	)
}
