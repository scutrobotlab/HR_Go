// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: hr.proto

package hr_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HrService_Ping_FullMethodName              = "/hr_service.HrService/Ping"
	HrService_GetAnnounceStatus_FullMethodName = "/hr_service.HrService/GetAnnounceStatus"
	HrService_GetExam_FullMethodName           = "/hr_service.HrService/GetExam"
	HrService_PostExam_FullMethodName          = "/hr_service.HrService/PostExam"
	HrService_GetGuide_FullMethodName          = "/hr_service.HrService/GetGuide"
	HrService_GetFormFormat_FullMethodName     = "/hr_service.HrService/GetFormFormat"
	HrService_GetFormGroups_FullMethodName     = "/hr_service.HrService/GetFormGroups"
	HrService_GetFormIntent_FullMethodName     = "/hr_service.HrService/GetFormIntent"
	HrService_Login_FullMethodName             = "/hr_service.HrService/Login"
	HrService_GetWechatInfo_FullMethodName     = "/hr_service.HrService/GetWechatInfo"
	HrService_PostApply_FullMethodName         = "/hr_service.HrService/PostApply"
	HrService_GetCanJoin_FullMethodName        = "/hr_service.HrService/GetCanJoin"
	HrService_GetMyForm_FullMethodName         = "/hr_service.HrService/GetMyForm"
	HrService_GetMyResult_FullMethodName       = "/hr_service.HrService/GetMyResult"
	HrService_GetMyStep_FullMethodName         = "/hr_service.HrService/GetMyStep"
	HrService_GetIntentList_FullMethodName     = "/hr_service.HrService/GetIntentList"
	HrService_GetTime_FullMethodName           = "/hr_service.HrService/GetTime"
	HrService_SelectTime_FullMethodName        = "/hr_service.HrService/SelectTime"
	HrService_GetReview_FullMethodName         = "/hr_service.HrService/GetReview"
	HrService_GetTimeConfig_FullMethodName     = "/hr_service.HrService/GetTimeConfig"
)

// HrServiceClient is the client API for HrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HrServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// announce
	GetAnnounceStatus(ctx context.Context, in *GetAnnounceStatusReq, opts ...grpc.CallOption) (*GetAnnounceStatusResp, error)
	// exam
	GetExam(ctx context.Context, in *GetExamReq, opts ...grpc.CallOption) (*GetExamResp, error)
	PostExam(ctx context.Context, in *PostExamReq, opts ...grpc.CallOption) (*PostExamResp, error)
	GetGuide(ctx context.Context, in *GetGuideReq, opts ...grpc.CallOption) (*GetGuideResp, error)
	// form
	GetFormFormat(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetFormFormatResp, error)
	GetFormGroups(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetFormGroupsResp, error)
	GetFormIntent(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetFormIntentResp, error)
	// join-us
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	GetWechatInfo(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetWechatInfoResp, error)
	PostApply(ctx context.Context, in *PostApplyReq, opts ...grpc.CallOption) (*PostApplyResp, error)
	GetCanJoin(ctx context.Context, in *GetCanJoinReq, opts ...grpc.CallOption) (*GetCanJoinResp, error)
	GetMyForm(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetMyFormResp, error)
	GetMyResult(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetMyResultResp, error)
	GetMyStep(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetMyStepResp, error)
	GetIntentList(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetIntentListResp, error)
	GetTime(ctx context.Context, in *GetTimeReq, opts ...grpc.CallOption) (*GetTimeResp, error)
	SelectTime(ctx context.Context, in *SelectTimeReq, opts ...grpc.CallOption) (*SelectTimeResp, error)
	GetReview(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetReviewResp, error)
	// time-config
	GetTimeConfig(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetTimeConfigResp, error)
}

type hrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHrServiceClient(cc grpc.ClientConnInterface) HrServiceClient {
	return &hrServiceClient{cc}
}

func (c *hrServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, HrService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetAnnounceStatus(ctx context.Context, in *GetAnnounceStatusReq, opts ...grpc.CallOption) (*GetAnnounceStatusResp, error) {
	out := new(GetAnnounceStatusResp)
	err := c.cc.Invoke(ctx, HrService_GetAnnounceStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetExam(ctx context.Context, in *GetExamReq, opts ...grpc.CallOption) (*GetExamResp, error) {
	out := new(GetExamResp)
	err := c.cc.Invoke(ctx, HrService_GetExam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) PostExam(ctx context.Context, in *PostExamReq, opts ...grpc.CallOption) (*PostExamResp, error) {
	out := new(PostExamResp)
	err := c.cc.Invoke(ctx, HrService_PostExam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetGuide(ctx context.Context, in *GetGuideReq, opts ...grpc.CallOption) (*GetGuideResp, error) {
	out := new(GetGuideResp)
	err := c.cc.Invoke(ctx, HrService_GetGuide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetFormFormat(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetFormFormatResp, error) {
	out := new(GetFormFormatResp)
	err := c.cc.Invoke(ctx, HrService_GetFormFormat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetFormGroups(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetFormGroupsResp, error) {
	out := new(GetFormGroupsResp)
	err := c.cc.Invoke(ctx, HrService_GetFormGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetFormIntent(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetFormIntentResp, error) {
	out := new(GetFormIntentResp)
	err := c.cc.Invoke(ctx, HrService_GetFormIntent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, HrService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetWechatInfo(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetWechatInfoResp, error) {
	out := new(GetWechatInfoResp)
	err := c.cc.Invoke(ctx, HrService_GetWechatInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) PostApply(ctx context.Context, in *PostApplyReq, opts ...grpc.CallOption) (*PostApplyResp, error) {
	out := new(PostApplyResp)
	err := c.cc.Invoke(ctx, HrService_PostApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetCanJoin(ctx context.Context, in *GetCanJoinReq, opts ...grpc.CallOption) (*GetCanJoinResp, error) {
	out := new(GetCanJoinResp)
	err := c.cc.Invoke(ctx, HrService_GetCanJoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetMyForm(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetMyFormResp, error) {
	out := new(GetMyFormResp)
	err := c.cc.Invoke(ctx, HrService_GetMyForm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetMyResult(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetMyResultResp, error) {
	out := new(GetMyResultResp)
	err := c.cc.Invoke(ctx, HrService_GetMyResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetMyStep(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetMyStepResp, error) {
	out := new(GetMyStepResp)
	err := c.cc.Invoke(ctx, HrService_GetMyStep_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetIntentList(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetIntentListResp, error) {
	out := new(GetIntentListResp)
	err := c.cc.Invoke(ctx, HrService_GetIntentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetTime(ctx context.Context, in *GetTimeReq, opts ...grpc.CallOption) (*GetTimeResp, error) {
	out := new(GetTimeResp)
	err := c.cc.Invoke(ctx, HrService_GetTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) SelectTime(ctx context.Context, in *SelectTimeReq, opts ...grpc.CallOption) (*SelectTimeResp, error) {
	out := new(SelectTimeResp)
	err := c.cc.Invoke(ctx, HrService_SelectTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetReview(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetReviewResp, error) {
	out := new(GetReviewResp)
	err := c.cc.Invoke(ctx, HrService_GetReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrServiceClient) GetTimeConfig(ctx context.Context, in *ApplicantIdReq, opts ...grpc.CallOption) (*GetTimeConfigResp, error) {
	out := new(GetTimeConfigResp)
	err := c.cc.Invoke(ctx, HrService_GetTimeConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HrServiceServer is the server API for HrService service.
// All implementations must embed UnimplementedHrServiceServer
// for forward compatibility
type HrServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// announce
	GetAnnounceStatus(context.Context, *GetAnnounceStatusReq) (*GetAnnounceStatusResp, error)
	// exam
	GetExam(context.Context, *GetExamReq) (*GetExamResp, error)
	PostExam(context.Context, *PostExamReq) (*PostExamResp, error)
	GetGuide(context.Context, *GetGuideReq) (*GetGuideResp, error)
	// form
	GetFormFormat(context.Context, *ApplicantIdReq) (*GetFormFormatResp, error)
	GetFormGroups(context.Context, *ApplicantIdReq) (*GetFormGroupsResp, error)
	GetFormIntent(context.Context, *ApplicantIdReq) (*GetFormIntentResp, error)
	// join-us
	Login(context.Context, *LoginReq) (*LoginResp, error)
	GetWechatInfo(context.Context, *ApplicantIdReq) (*GetWechatInfoResp, error)
	PostApply(context.Context, *PostApplyReq) (*PostApplyResp, error)
	GetCanJoin(context.Context, *GetCanJoinReq) (*GetCanJoinResp, error)
	GetMyForm(context.Context, *ApplicantIdReq) (*GetMyFormResp, error)
	GetMyResult(context.Context, *ApplicantIdReq) (*GetMyResultResp, error)
	GetMyStep(context.Context, *ApplicantIdReq) (*GetMyStepResp, error)
	GetIntentList(context.Context, *ApplicantIdReq) (*GetIntentListResp, error)
	GetTime(context.Context, *GetTimeReq) (*GetTimeResp, error)
	SelectTime(context.Context, *SelectTimeReq) (*SelectTimeResp, error)
	GetReview(context.Context, *ApplicantIdReq) (*GetReviewResp, error)
	// time-config
	GetTimeConfig(context.Context, *ApplicantIdReq) (*GetTimeConfigResp, error)
	mustEmbedUnimplementedHrServiceServer()
}

// UnimplementedHrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHrServiceServer struct {
}

func (UnimplementedHrServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHrServiceServer) GetAnnounceStatus(context.Context, *GetAnnounceStatusReq) (*GetAnnounceStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnnounceStatus not implemented")
}
func (UnimplementedHrServiceServer) GetExam(context.Context, *GetExamReq) (*GetExamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExam not implemented")
}
func (UnimplementedHrServiceServer) PostExam(context.Context, *PostExamReq) (*PostExamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostExam not implemented")
}
func (UnimplementedHrServiceServer) GetGuide(context.Context, *GetGuideReq) (*GetGuideResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuide not implemented")
}
func (UnimplementedHrServiceServer) GetFormFormat(context.Context, *ApplicantIdReq) (*GetFormFormatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormFormat not implemented")
}
func (UnimplementedHrServiceServer) GetFormGroups(context.Context, *ApplicantIdReq) (*GetFormGroupsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormGroups not implemented")
}
func (UnimplementedHrServiceServer) GetFormIntent(context.Context, *ApplicantIdReq) (*GetFormIntentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFormIntent not implemented")
}
func (UnimplementedHrServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedHrServiceServer) GetWechatInfo(context.Context, *ApplicantIdReq) (*GetWechatInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWechatInfo not implemented")
}
func (UnimplementedHrServiceServer) PostApply(context.Context, *PostApplyReq) (*PostApplyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostApply not implemented")
}
func (UnimplementedHrServiceServer) GetCanJoin(context.Context, *GetCanJoinReq) (*GetCanJoinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCanJoin not implemented")
}
func (UnimplementedHrServiceServer) GetMyForm(context.Context, *ApplicantIdReq) (*GetMyFormResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyForm not implemented")
}
func (UnimplementedHrServiceServer) GetMyResult(context.Context, *ApplicantIdReq) (*GetMyResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyResult not implemented")
}
func (UnimplementedHrServiceServer) GetMyStep(context.Context, *ApplicantIdReq) (*GetMyStepResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyStep not implemented")
}
func (UnimplementedHrServiceServer) GetIntentList(context.Context, *ApplicantIdReq) (*GetIntentListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntentList not implemented")
}
func (UnimplementedHrServiceServer) GetTime(context.Context, *GetTimeReq) (*GetTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTime not implemented")
}
func (UnimplementedHrServiceServer) SelectTime(context.Context, *SelectTimeReq) (*SelectTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTime not implemented")
}
func (UnimplementedHrServiceServer) GetReview(context.Context, *ApplicantIdReq) (*GetReviewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReview not implemented")
}
func (UnimplementedHrServiceServer) GetTimeConfig(context.Context, *ApplicantIdReq) (*GetTimeConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeConfig not implemented")
}
func (UnimplementedHrServiceServer) mustEmbedUnimplementedHrServiceServer() {}

// UnsafeHrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HrServiceServer will
// result in compilation errors.
type UnsafeHrServiceServer interface {
	mustEmbedUnimplementedHrServiceServer()
}

func RegisterHrServiceServer(s grpc.ServiceRegistrar, srv HrServiceServer) {
	s.RegisterService(&HrService_ServiceDesc, srv)
}

func _HrService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetAnnounceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnnounceStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetAnnounceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetAnnounceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetAnnounceStatus(ctx, req.(*GetAnnounceStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetExam(ctx, req.(*GetExamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_PostExam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostExamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).PostExam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_PostExam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).PostExam(ctx, req.(*PostExamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetGuide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuideReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetGuide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetGuide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetGuide(ctx, req.(*GetGuideReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetFormFormat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetFormFormat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetFormFormat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetFormFormat(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetFormGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetFormGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetFormGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetFormGroups(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetFormIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetFormIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetFormIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetFormIntent(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetWechatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetWechatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetWechatInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetWechatInfo(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_PostApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).PostApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_PostApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).PostApply(ctx, req.(*PostApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetCanJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCanJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetCanJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetCanJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetCanJoin(ctx, req.(*GetCanJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetMyForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetMyForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetMyForm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetMyForm(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetMyResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetMyResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetMyResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetMyResult(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetMyStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetMyStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetMyStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetMyStep(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetIntentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetIntentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetIntentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetIntentList(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetTime(ctx, req.(*GetTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_SelectTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).SelectTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_SelectTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).SelectTime(ctx, req.(*SelectTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetReview(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HrService_GetTimeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicantIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HrServiceServer).GetTimeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HrService_GetTimeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HrServiceServer).GetTimeConfig(ctx, req.(*ApplicantIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HrService_ServiceDesc is the grpc.ServiceDesc for HrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hr_service.HrService",
	HandlerType: (*HrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _HrService_Ping_Handler,
		},
		{
			MethodName: "GetAnnounceStatus",
			Handler:    _HrService_GetAnnounceStatus_Handler,
		},
		{
			MethodName: "GetExam",
			Handler:    _HrService_GetExam_Handler,
		},
		{
			MethodName: "PostExam",
			Handler:    _HrService_PostExam_Handler,
		},
		{
			MethodName: "GetGuide",
			Handler:    _HrService_GetGuide_Handler,
		},
		{
			MethodName: "GetFormFormat",
			Handler:    _HrService_GetFormFormat_Handler,
		},
		{
			MethodName: "GetFormGroups",
			Handler:    _HrService_GetFormGroups_Handler,
		},
		{
			MethodName: "GetFormIntent",
			Handler:    _HrService_GetFormIntent_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _HrService_Login_Handler,
		},
		{
			MethodName: "GetWechatInfo",
			Handler:    _HrService_GetWechatInfo_Handler,
		},
		{
			MethodName: "PostApply",
			Handler:    _HrService_PostApply_Handler,
		},
		{
			MethodName: "GetCanJoin",
			Handler:    _HrService_GetCanJoin_Handler,
		},
		{
			MethodName: "GetMyForm",
			Handler:    _HrService_GetMyForm_Handler,
		},
		{
			MethodName: "GetMyResult",
			Handler:    _HrService_GetMyResult_Handler,
		},
		{
			MethodName: "GetMyStep",
			Handler:    _HrService_GetMyStep_Handler,
		},
		{
			MethodName: "GetIntentList",
			Handler:    _HrService_GetIntentList_Handler,
		},
		{
			MethodName: "GetTime",
			Handler:    _HrService_GetTime_Handler,
		},
		{
			MethodName: "SelectTime",
			Handler:    _HrService_SelectTime_Handler,
		},
		{
			MethodName: "GetReview",
			Handler:    _HrService_GetReview_Handler,
		},
		{
			MethodName: "GetTimeConfig",
			Handler:    _HrService_GetTimeConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hr.proto",
}
